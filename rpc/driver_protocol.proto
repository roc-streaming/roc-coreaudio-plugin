/*
 * Copyright (c) Roc Streaming authors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

syntax = "proto3";

package rocvad;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// RPC interface for Roc Virtual Audio Device driver.
service DriverProtocol
{
    // Check driver presence.
    // This command does nothing and just returns success.
    rpc ping(PrNone) returns (PrNone) {}

    // Get driver info.
    rpc driver_info(PrNone) returns (PrDriverInfo) {}

    // Stream driver logs to client.
    // Logs are duplicated to all clients that want to stream them.
    // Logs are also duplicated to syslog.
    rpc stream_logs(PrNone) returns (stream PrLogEntry) {}

    // Get info for all virtual devices.
    rpc get_all_devices(PrNone) returns (PrDeviceList) {}

    // Get info for one virtual device.
    // Device can be selected by index or UID.
    rpc get_device(PrDeviceSelector) returns (PrDeviceInfo) {}

    // Create new virtual device.
    // Returns updated device info with all fields set.
    rpc add_device(PrDeviceInfo) returns (PrDeviceInfo) {}

    // Delete virtual device.
    // Device can be selected by index or UID.
    rpc delete_device(PrDeviceSelector) returns (PrNone) {}
}

// No data.
message PrNone
{
}

// Info about driver.
message PrDriverInfo
{
    // Driver version (comes from git tag).
    string version = 1;

    // Driver commit hash (comes from git commit).
    string commit = 2;
}

// Driver log message.
message PrLogEntry
{
    enum Level
    {
        CRIT = 0;
        ERROR = 1;
        WARN = 2;
        INFO = 3;
        DEBUG = 4;
        TRACE = 5;
    }

    // Absolute time when message was generated.
    google.protobuf.Timestamp time = 1;

    // Message level.
    Level level = 2;

    // Formatted message text (without time and level).
    string text = 3;
}

// Virtual device selector.
message PrDeviceSelector
{
    oneof Selector
    {
        // Select device by index.
        uint32 index = 1;

        // Select device by UID.
        string uid = 2;
    }
}

// Virtual device info.
message PrDeviceInfo
{
    // Device type.
    // Each virtual device can be either sender (output device) or
    // receiver (input device).
    // Required field.
    PrDeviceType type = 1;

    // Device index identifier.
    // Index is a small numeric value that is reused for new devices
    // after device deletion.
    // When retrieving device info, always present and non-zero.
    // When creating device, keep unset to automaitcally select free index.
    // When set, should not be zero.
    optional uint32 index = 2;

    // Device UID identifier.
    // UID is a long string identifier, unique across all audio devices,
    // and very unlikely to be ever reused.
    // When retrieving device info, always present and non-empty.
    // When creating device, keep unset to generate random UID.
    // When set, should not be empty.
    optional string uid = 3;

    // Human-readable device name.
    // Device name is shown to the user in UI.
    // When retrieving device info, always present and non-empty.
    // When creating device, keep unset to generate name automatically.
    // When set, should not be empty.
    optional string name = 4;

    // Local configuration of device.
    // Parameters of virtual device, as it's shown to the local apps.
    PrLocalConfig local_config = 5;

    // Network configuration of device.
    // Parameters of network sender or receiver.
    oneof NetworkConfig
    {
        // Configuration for sender device.
        // Should be used if device type is PR_DEVICE_TYPE_SENDER.
        PrSenderConfig sender_config = 6;

        // Configuration for receiver device.
        // Should be used if device type is PR_DEVICE_TYPE_RECEIVER.
        PrReceiverConfig receiver_config = 7;
    }
}

// Virtual device list.
message PrDeviceList
{
    repeated PrDeviceInfo devices = 1;
}

// Local parameters of virtual device.
message PrLocalConfig
{
    // Virtual device sample rate, in Hertz (e.g. 44100).
    // When retrieving device info, always present and non-zero.
    // When creating device, keep unset to use default (44100).
    optional uint32 sample_rate = 1;

    // Virtual device channel set (e.g. stereo).
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (PR_CHANNEL_SET_STEREO).
    optional PrChannelSet channel_set = 2;
}

// Parameters of sender device.
message PrSenderConfig
{
    // Encoding for network packets.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (PR_PACKET_ENCODING_AVP_L16).
    optional PrPacketEncoding packet_encoding = 1;

    // Duration of a single packet.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (7ms).
    // When set, should not be zero.
    optional google.protobuf.Duration packet_length = 2;

    // Forward Error Correction encoding.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (PR_FEC_ENCODING_RS8M).
    optional PrFecEncoding fec_encoding = 3;

    // Number of source packets per FEC block.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (20).
    // When set, should not be zero.
    optional uint32 fec_block_source_packets = 4;

    // Number of repair packets per FEC block.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (10).
    // When set, should not be zero.
    optional uint32 fec_block_repair_packets = 5;
}

// Parameters of receiver device.
message PrReceiverConfig
{
    // Target session latency.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (100ms).
    // When set, should not be zero.
    optional google.protobuf.Duration target_latency = 1;

    // Resampling engine.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (PR_RESAMPLER_BACKEND_SPEEX).
    optional PrResamplerBackend resampler_backend = 2;

    // Resampling quality.
    // When retrieving device info, always present.
    // When creating device, keep unset to use default (PR_RESAMPLER_PROFILE_MEDIUM).
    optional PrResamplerProfile resampler_profile = 3;
}

// Device type.
// Defines whether device will be input or output.
enum PrDeviceType
{
    // Output device that sends sound to remote receiver.
    PR_DEVICE_TYPE_SENDER = 0;

    // Input device that receives sound from remote sender.
    PR_DEVICE_TYPE_RECEIVER = 1;
}

// Device channel set.
// Defines what channels will be shown to apps that use the device.
enum PrChannelSet
{
    // Two channels: left and right.
    PR_CHANNEL_SET_STEREO = 0;
}

// Network packet encoding.
// Defines how samples are encoded when sent over network.
enum PrPacketEncoding
{
    // PCM signed 16-bit.
    // "L16" encoding from RTP A/V Profile (RFC 3551).
    // Uncompressed samples coded as interleaved 16-bit signed big-endian
    // integers in two's complement notation.
    PR_PACKET_ENCODING_AVP_L16 = 0;
}

// Forward Error Correction encoding.
// Defines method for repairing lost packets to improve quality on
// unreliable networks.
enum PrFecEncoding
{
    // No FEC encoding.
    PR_FEC_ENCODING_DISABLE = 0;

    // Reed-Solomon FEC encoding (RFC 6865) with m=8.
    // Good for small block sizes (below 256 packets).
    PR_FEC_ENCODING_RS8M = 1;

    // LDPC-Staircase FEC encoding (RFC 6816).
    // Good for large block sizes (above 1024 packets).
    PR_FEC_ENCODING_LDPC_STAIRCASE = 2;
}

// Resampler backend.
// Affects speed and quality.
enum PrResamplerBackend
{
    // Slow built-in resampler.
    PR_RESAMPLER_BACKEND_BUILTIN = 0;

    // Fast good-quality resampler from SpeexDSP.
    PR_RESAMPLER_BACKEND_SPEEX = 1;
}

// Resampler profile.
// Affects speed and quality.
// Each resampler backend treats profile in its own way.
enum PrResamplerProfile
{
    // Do not perform resampling.
    // Clock drift compensation will be disabled in this case.
    // If in doubt, do not disable resampling.
    PR_RESAMPLER_PROFILE_DISABLE = 0;

    // High quality, low speed.
    PR_RESAMPLER_PROFILE_HIGH = 1;

    // Medium quality, medium speed.
    PR_RESAMPLER_PROFILE_MEDIUM = 2;

    // Low quality, high speed.
    PR_RESAMPLER_PROFILE_LOW = 3;
}
