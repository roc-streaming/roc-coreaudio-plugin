// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: driver_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_driver_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_driver_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_driver_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_driver_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_driver_5fprotocol_2eproto;
namespace rocvad {
class MesgAddDevice;
struct MesgAddDeviceDefaultTypeInternal;
extern MesgAddDeviceDefaultTypeInternal _MesgAddDevice_default_instance_;
class MesgDeleteDevice;
struct MesgDeleteDeviceDefaultTypeInternal;
extern MesgDeleteDeviceDefaultTypeInternal _MesgDeleteDevice_default_instance_;
class MesgInfo;
struct MesgInfoDefaultTypeInternal;
extern MesgInfoDefaultTypeInternal _MesgInfo_default_instance_;
class MesgLogEntry;
struct MesgLogEntryDefaultTypeInternal;
extern MesgLogEntryDefaultTypeInternal _MesgLogEntry_default_instance_;
class MesgNone;
struct MesgNoneDefaultTypeInternal;
extern MesgNoneDefaultTypeInternal _MesgNone_default_instance_;
}  // namespace rocvad
PROTOBUF_NAMESPACE_OPEN
template<> ::rocvad::MesgAddDevice* Arena::CreateMaybeMessage<::rocvad::MesgAddDevice>(Arena*);
template<> ::rocvad::MesgDeleteDevice* Arena::CreateMaybeMessage<::rocvad::MesgDeleteDevice>(Arena*);
template<> ::rocvad::MesgInfo* Arena::CreateMaybeMessage<::rocvad::MesgInfo>(Arena*);
template<> ::rocvad::MesgLogEntry* Arena::CreateMaybeMessage<::rocvad::MesgLogEntry>(Arena*);
template<> ::rocvad::MesgNone* Arena::CreateMaybeMessage<::rocvad::MesgNone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rocvad {

// ===================================================================

class MesgNone final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rocvad.MesgNone) */ {
 public:
  inline MesgNone() : MesgNone(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MesgNone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MesgNone(const MesgNone& from);
  MesgNone(MesgNone&& from) noexcept
    : MesgNone() {
    *this = ::std::move(from);
  }

  inline MesgNone& operator=(const MesgNone& from) {
    CopyFrom(from);
    return *this;
  }
  inline MesgNone& operator=(MesgNone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MesgNone& default_instance() {
    return *internal_default_instance();
  }
  static inline const MesgNone* internal_default_instance() {
    return reinterpret_cast<const MesgNone*>(
               &_MesgNone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MesgNone& a, MesgNone& b) {
    a.Swap(&b);
  }
  inline void Swap(MesgNone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MesgNone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MesgNone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MesgNone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MesgNone& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MesgNone& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocvad.MesgNone";
  }
  protected:
  explicit MesgNone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rocvad.MesgNone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_driver_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class MesgInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocvad.MesgInfo) */ {
 public:
  inline MesgInfo() : MesgInfo(nullptr) {}
  ~MesgInfo() override;
  explicit PROTOBUF_CONSTEXPR MesgInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MesgInfo(const MesgInfo& from);
  MesgInfo(MesgInfo&& from) noexcept
    : MesgInfo() {
    *this = ::std::move(from);
  }

  inline MesgInfo& operator=(const MesgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MesgInfo& operator=(MesgInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MesgInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MesgInfo* internal_default_instance() {
    return reinterpret_cast<const MesgInfo*>(
               &_MesgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MesgInfo& a, MesgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MesgInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MesgInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MesgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MesgInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MesgInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MesgInfo& from) {
    MesgInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MesgInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocvad.MesgInfo";
  }
  protected:
  explicit MesgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCommitFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string commit = 2;
  void clear_commit();
  const std::string& commit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commit();
  PROTOBUF_NODISCARD std::string* release_commit();
  void set_allocated_commit(std::string* commit);
  private:
  const std::string& _internal_commit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commit(const std::string& value);
  std::string* _internal_mutable_commit();
  public:

  // @@protoc_insertion_point(class_scope:rocvad.MesgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_driver_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class MesgLogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocvad.MesgLogEntry) */ {
 public:
  inline MesgLogEntry() : MesgLogEntry(nullptr) {}
  ~MesgLogEntry() override;
  explicit PROTOBUF_CONSTEXPR MesgLogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MesgLogEntry(const MesgLogEntry& from);
  MesgLogEntry(MesgLogEntry&& from) noexcept
    : MesgLogEntry() {
    *this = ::std::move(from);
  }

  inline MesgLogEntry& operator=(const MesgLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MesgLogEntry& operator=(MesgLogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MesgLogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MesgLogEntry* internal_default_instance() {
    return reinterpret_cast<const MesgLogEntry*>(
               &_MesgLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MesgLogEntry& a, MesgLogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MesgLogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MesgLogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MesgLogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MesgLogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MesgLogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MesgLogEntry& from) {
    MesgLogEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MesgLogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocvad.MesgLogEntry";
  }
  protected:
  explicit MesgLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:rocvad.MesgLogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_driver_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class MesgAddDevice final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rocvad.MesgAddDevice) */ {
 public:
  inline MesgAddDevice() : MesgAddDevice(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MesgAddDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MesgAddDevice(const MesgAddDevice& from);
  MesgAddDevice(MesgAddDevice&& from) noexcept
    : MesgAddDevice() {
    *this = ::std::move(from);
  }

  inline MesgAddDevice& operator=(const MesgAddDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline MesgAddDevice& operator=(MesgAddDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MesgAddDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const MesgAddDevice* internal_default_instance() {
    return reinterpret_cast<const MesgAddDevice*>(
               &_MesgAddDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MesgAddDevice& a, MesgAddDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(MesgAddDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MesgAddDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MesgAddDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MesgAddDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MesgAddDevice& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MesgAddDevice& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocvad.MesgAddDevice";
  }
  protected:
  explicit MesgAddDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rocvad.MesgAddDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_driver_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class MesgDeleteDevice final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rocvad.MesgDeleteDevice) */ {
 public:
  inline MesgDeleteDevice() : MesgDeleteDevice(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MesgDeleteDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MesgDeleteDevice(const MesgDeleteDevice& from);
  MesgDeleteDevice(MesgDeleteDevice&& from) noexcept
    : MesgDeleteDevice() {
    *this = ::std::move(from);
  }

  inline MesgDeleteDevice& operator=(const MesgDeleteDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline MesgDeleteDevice& operator=(MesgDeleteDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MesgDeleteDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const MesgDeleteDevice* internal_default_instance() {
    return reinterpret_cast<const MesgDeleteDevice*>(
               &_MesgDeleteDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MesgDeleteDevice& a, MesgDeleteDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(MesgDeleteDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MesgDeleteDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MesgDeleteDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MesgDeleteDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MesgDeleteDevice& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MesgDeleteDevice& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocvad.MesgDeleteDevice";
  }
  protected:
  explicit MesgDeleteDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rocvad.MesgDeleteDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_driver_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MesgNone

// -------------------------------------------------------------------

// MesgInfo

// string version = 1;
inline void MesgInfo::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& MesgInfo::version() const {
  // @@protoc_insertion_point(field_get:rocvad.MesgInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MesgInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rocvad.MesgInfo.version)
}
inline std::string* MesgInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:rocvad.MesgInfo.version)
  return _s;
}
inline const std::string& MesgInfo::_internal_version() const {
  return _impl_.version_.Get();
}
inline void MesgInfo::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* MesgInfo::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* MesgInfo::release_version() {
  // @@protoc_insertion_point(field_release:rocvad.MesgInfo.version)
  return _impl_.version_.Release();
}
inline void MesgInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rocvad.MesgInfo.version)
}

// string commit = 2;
inline void MesgInfo::clear_commit() {
  _impl_.commit_.ClearToEmpty();
}
inline const std::string& MesgInfo::commit() const {
  // @@protoc_insertion_point(field_get:rocvad.MesgInfo.commit)
  return _internal_commit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MesgInfo::set_commit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.commit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rocvad.MesgInfo.commit)
}
inline std::string* MesgInfo::mutable_commit() {
  std::string* _s = _internal_mutable_commit();
  // @@protoc_insertion_point(field_mutable:rocvad.MesgInfo.commit)
  return _s;
}
inline const std::string& MesgInfo::_internal_commit() const {
  return _impl_.commit_.Get();
}
inline void MesgInfo::_internal_set_commit(const std::string& value) {
  
  _impl_.commit_.Set(value, GetArenaForAllocation());
}
inline std::string* MesgInfo::_internal_mutable_commit() {
  
  return _impl_.commit_.Mutable(GetArenaForAllocation());
}
inline std::string* MesgInfo::release_commit() {
  // @@protoc_insertion_point(field_release:rocvad.MesgInfo.commit)
  return _impl_.commit_.Release();
}
inline void MesgInfo::set_allocated_commit(std::string* commit) {
  if (commit != nullptr) {
    
  } else {
    
  }
  _impl_.commit_.SetAllocated(commit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commit_.IsDefault()) {
    _impl_.commit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rocvad.MesgInfo.commit)
}

// -------------------------------------------------------------------

// MesgLogEntry

// string text = 1;
inline void MesgLogEntry::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& MesgLogEntry::text() const {
  // @@protoc_insertion_point(field_get:rocvad.MesgLogEntry.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MesgLogEntry::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rocvad.MesgLogEntry.text)
}
inline std::string* MesgLogEntry::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:rocvad.MesgLogEntry.text)
  return _s;
}
inline const std::string& MesgLogEntry::_internal_text() const {
  return _impl_.text_.Get();
}
inline void MesgLogEntry::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* MesgLogEntry::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* MesgLogEntry::release_text() {
  // @@protoc_insertion_point(field_release:rocvad.MesgLogEntry.text)
  return _impl_.text_.Release();
}
inline void MesgLogEntry::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rocvad.MesgLogEntry.text)
}

// -------------------------------------------------------------------

// MesgAddDevice

// -------------------------------------------------------------------

// MesgDeleteDevice

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rocvad

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_driver_5fprotocol_2eproto
