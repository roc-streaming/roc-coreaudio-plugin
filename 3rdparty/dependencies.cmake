include(ExternalProject)

set(LIST_SEPARATOR "!")
string(REPLACE ";" "${LIST_SEPARATOR}"
  OSX_ARCHITECTURES_LISTSEP "${CMAKE_OSX_ARCHITECTURES}")
string(REPLACE ";" ","
  OSX_ARCHITECTURES_COMMA "${CMAKE_OSX_ARCHITECTURES}")

if("$ENV{CI}" STREQUAL "1" OR "$ENV{CI}" STREQUAL "true")
  set(ENABLE_LOGS NO)
else()
  set(ENABLE_LOGS YES)
endif()

# Roc
set(SCONS_CMD
  scons -Q
    --prefix=${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-prefix
    --disable-tools --disable-shared --enable-static
    --build-3rdparty=all
    --macos-platform=${CMAKE_OSX_DEPLOYMENT_TARGET}
    --macos-arch=${OSX_ARCHITECTURES_COMMA}
)
ExternalProject_Add(roc
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/roc
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-prefix
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E remove_directory
      ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-src
  COMMAND
    ${CMAKE_COMMAND} -E make_directory
      ${CMAKE_CURRENT_BINARY_DIR}/3rdparty
  COMMAND
    ${CMAKE_COMMAND} -E copy_directory
      ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/roc
      ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-src
  BUILD_COMMAND
    ${SCONS_CMD} -C ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-src
  INSTALL_COMMAND
    ${SCONS_CMD} -C ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-src install
  LOG_DOWNLOAD ${ENABLE_LOGS}
  LOG_CONFIGURE ${ENABLE_LOGS}
  LOG_BUILD ${ENABLE_LOGS}
  LOG_INSTALL ${ENABLE_LOGS}
)
include_directories(SYSTEM
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-prefix/include
)
link_directories(
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/roc-prefix/lib
)

# libASPL
ExternalProject_Add(libASPL
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/libASPL
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/libASPL-prefix
  LIST_SEPARATOR ${LIST_SEPARATOR}
  CMAKE_ARGS
    -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES_LISTSEP}
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
  LOG_DOWNLOAD ${ENABLE_LOGS}
  LOG_CONFIGURE ${ENABLE_LOGS}
  LOG_BUILD ${ENABLE_LOGS}
  LOG_INSTALL ${ENABLE_LOGS}
)
include_directories(SYSTEM
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/libASPL-prefix/include
)
list(PREPEND CMAKE_PREFIX_PATH
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/libASPL-prefix/lib/cmake
)

# BoringSSL
ExternalProject_Add(BoringSSL
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/BoringSSL
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/BoringSSL-prefix
  LIST_SEPARATOR ${LIST_SEPARATOR}
  CMAKE_ARGS
    -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES_LISTSEP}
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    -DOPENSSL_NO_ASM=1
  LOG_DOWNLOAD ${ENABLE_LOGS}
  LOG_CONFIGURE ${ENABLE_LOGS}
  LOG_BUILD ${ENABLE_LOGS}
  LOG_INSTALL ${ENABLE_LOGS}
)
include_directories(SYSTEM
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/BoringSSL-prefix/include
)
list(PREPEND CMAKE_PREFIX_PATH
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/BoringSSL-prefix/lib/cmake
)

# gRPC
ExternalProject_Add(gRPC
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/gRPC
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/gRPC-prefix
  LIST_SEPARATOR ${LIST_SEPARATOR}
  CMAKE_ARGS
    -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES_LISTSEP}
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    -DBUILD_TESTING=OFF
    -DgRPC_BUILD_TESTS=OFF
    -DgRPC_BUILD_CODEGEN=ON
    -DgRPC_BUILD_CSHARP_EXT=OFF
    -DgRPC_BUILD_GRPC_CPP_PLUGIN=ON
    -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF
    -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF
    -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF
    -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF
    -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF
    -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF
    -DgRPC_SSL_PROVIDER=package
    -DOPENSSL_ROOT_DIR=${CMAKE_CURRENT_BINARY_DIR}/3rdparty/BoringSSL-prefix
    -DOPENSSL_USE_STATIC_LIBS=ON
  LOG_DOWNLOAD ${ENABLE_LOGS}
  LOG_CONFIGURE ${ENABLE_LOGS}
  LOG_BUILD ${ENABLE_LOGS}
  LOG_INSTALL ${ENABLE_LOGS}
)
include_directories(SYSTEM
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/gRPC-prefix/include
)
list(PREPEND CMAKE_PREFIX_PATH
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/gRPC-prefix/lib/cmake
)
get_filename_component(GRPC_BIN_DIR
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/gRPC-prefix/bin
  ABSOLUTE
)

# fmt
ExternalProject_Add(fmt
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/fmt
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/fmt-prefix
  LIST_SEPARATOR ${LIST_SEPARATOR}
  CMAKE_ARGS
    -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES_LISTSEP}
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    -DBUILD_TESTING=OFF
    -DFMT_DOC=OFF
    -DFMT_INSTALL=ON
    -DFMT_TEST=OFF
  LOG_DOWNLOAD ${ENABLE_LOGS}
  LOG_CONFIGURE ${ENABLE_LOGS}
  LOG_BUILD ${ENABLE_LOGS}
  LOG_INSTALL ${ENABLE_LOGS}
)
include_directories(SYSTEM
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/fmt-prefix/include
)
list(PREPEND CMAKE_PREFIX_PATH
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/fmt-prefix/lib/cmake
)

# spdlog
ExternalProject_Add(spdlog
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/spdlog
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/spdlog-prefix
  LIST_SEPARATOR ${LIST_SEPARATOR}
  CMAKE_ARGS
    -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES_LISTSEP}
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    -DCMAKE_PREFIX_PATH=${CMAKE_CURRENT_BINARY_DIR}/3rdparty/fmt-prefix/lib/cmake
    -DSPDLOG_FMT_EXTERNAL=ON
  LOG_DOWNLOAD ${ENABLE_LOGS}
  LOG_CONFIGURE ${ENABLE_LOGS}
  LOG_BUILD ${ENABLE_LOGS}
  LOG_INSTALL ${ENABLE_LOGS}
)
include_directories(SYSTEM
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/spdlog-prefix/include
)
list(PREPEND CMAKE_PREFIX_PATH
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/spdlog-prefix/lib/cmake
)
add_definitions(
  -DSPDLOG_COMPILED_LIB
  -DSPDLOG_FMT_EXTERNAL
)

# CLI111
ExternalProject_Add(CLI11
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/CLI11
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/CLI11-prefix
  LIST_SEPARATOR ${LIST_SEPARATOR}
  CMAKE_ARGS
    -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES_LISTSEP}
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    -DBUILD_TESTING=OFF
    -DCLI11_BUILD_TESTS=OFF
    -DCLI11_BUILD_EXAMPLES=OFF
    -DCLI11_SINGLE_FILE=ON
  LOG_DOWNLOAD ${ENABLE_LOGS}
  LOG_CONFIGURE ${ENABLE_LOGS}
  LOG_BUILD ${ENABLE_LOGS}
  LOG_INSTALL ${ENABLE_LOGS}
)
include_directories(SYSTEM
  ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/CLI11-prefix/include
)

# List
set(ALL_DEPENDENCIES
  roc
  libASPL
  BoringSSL
  gRPC
  fmt
  spdlog
  CLI11
  )

list(REVERSE ALL_DEPENDENCIES)

set(OTHER_DEPENDENCIES ${ALL_DEPENDENCIES})
foreach(DEPENDENCY IN LISTS ALL_DEPENDENCIES)
  list(REMOVE_ITEM OTHER_DEPENDENCIES ${DEPENDENCY})
  if(OTHER_DEPENDENCIES)
    add_dependencies(${DEPENDENCY}
      ${OTHER_DEPENDENCIES}
      )
  endif()
endforeach()

# Commit
add_custom_command(
  COMMENT "Commit bootstrap"
  DEPENDS ${ALL_DEPENDENCIES}
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/bootstrap.commit
  COMMAND ${CMAKE_COMMAND} -E touch
    ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/bootstrap.commit
)
add_custom_target(commit_bootstrap ALL
  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/3rdparty/bootstrap.commit
)
