// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: driver_protocol.proto
// Protobuf C++ Version: 5.26.1

#include "driver_protocol.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rocvad {
      template <typename>
PROTOBUF_CONSTEXPR PrNone::PrNone(::_pbi::ConstantInitialized) {}
struct PrNoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrNoneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrNoneDefaultTypeInternal() {}
  union {
    PrNone _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrNoneDefaultTypeInternal _PrNone_default_instance_;

inline constexpr PrLocalConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sample_rate_{0u},
        channel_layout_{static_cast< ::rocvad::PrChannelLayout >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PrLocalConfig::PrLocalConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrLocalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrLocalConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrLocalConfigDefaultTypeInternal() {}
  union {
    PrLocalConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrLocalConfigDefaultTypeInternal _PrLocalConfig_default_instance_;

inline constexpr PrEndpointInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        slot_{0u},
        interface_{static_cast< ::rocvad::PrInterface >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PrEndpointInfo::PrEndpointInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrEndpointInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrEndpointInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrEndpointInfoDefaultTypeInternal() {}
  union {
    PrEndpointInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrEndpointInfoDefaultTypeInternal _PrEndpointInfo_default_instance_;

inline constexpr PrDriverInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        commit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PrDriverInfo::PrDriverInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrDriverInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDriverInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDriverInfoDefaultTypeInternal() {}
  union {
    PrDriverInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDriverInfoDefaultTypeInternal _PrDriverInfo_default_instance_;

inline constexpr PrDeviceSelector::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : Selector_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PrDeviceSelector::PrDeviceSelector(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrDeviceSelectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDeviceSelectorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDeviceSelectorDefaultTypeInternal() {}
  union {
    PrDeviceSelector _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDeviceSelectorDefaultTypeInternal _PrDeviceSelector_default_instance_;

inline constexpr PrSenderConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        packet_length_{nullptr},
        target_latency_{nullptr},
        min_latency_{nullptr},
        max_latency_{nullptr},
        packet_encoding_{static_cast< ::rocvad::PrPacketEncoding >(0)},
        packet_interleaving_{false},
        fec_encoding_{static_cast< ::rocvad::PrFecEncoding >(0)},
        fec_block_source_packets_{0u},
        fec_block_repair_packets_{0u},
        latency_tuner_backend_{static_cast< ::rocvad::PrLatencyTunerBackend >(0)},
        latency_tuner_profile_{static_cast< ::rocvad::PrLatencyTunerProfile >(0)},
        resampler_backend_{static_cast< ::rocvad::PrResamplerBackend >(0)},
        resampler_profile_{static_cast< ::rocvad::PrResamplerProfile >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PrSenderConfig::PrSenderConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrSenderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrSenderConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrSenderConfigDefaultTypeInternal() {}
  union {
    PrSenderConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrSenderConfigDefaultTypeInternal _PrSenderConfig_default_instance_;

inline constexpr PrReceiverConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_latency_{nullptr},
        min_latency_{nullptr},
        max_latency_{nullptr},
        no_playback_timeout_{nullptr},
        choppy_playback_timeout_{nullptr},
        latency_tuner_backend_{static_cast< ::rocvad::PrLatencyTunerBackend >(0)},
        latency_tuner_profile_{static_cast< ::rocvad::PrLatencyTunerProfile >(0)},
        resampler_backend_{static_cast< ::rocvad::PrResamplerBackend >(0)},
        resampler_profile_{static_cast< ::rocvad::PrResamplerProfile >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PrReceiverConfig::PrReceiverConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrReceiverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrReceiverConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrReceiverConfigDefaultTypeInternal() {}
  union {
    PrReceiverConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrReceiverConfigDefaultTypeInternal _PrReceiverConfig_default_instance_;

inline constexpr PrLogEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        level_{static_cast< ::rocvad::PrLogEntry_Level >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PrLogEntry::PrLogEntry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrLogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrLogEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrLogEntryDefaultTypeInternal() {}
  union {
    PrLogEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrLogEntryDefaultTypeInternal _PrLogEntry_default_instance_;

inline constexpr PrEndpointRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_{nullptr},
        endpoint_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PrEndpointRequest::PrEndpointRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrEndpointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrEndpointRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrEndpointRequestDefaultTypeInternal() {}
  union {
    PrEndpointRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrEndpointRequestDefaultTypeInternal _PrEndpointRequest_default_instance_;

inline constexpr PrDeviceInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        local_endpoints_{},
        remote_endpoints_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        local_config_{nullptr},
        type_{static_cast< ::rocvad::PrDeviceType >(0)},
        index_{0u},
        NetworkConfig_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PrDeviceInfo::PrDeviceInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDeviceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDeviceInfoDefaultTypeInternal() {}
  union {
    PrDeviceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDeviceInfoDefaultTypeInternal _PrDeviceInfo_default_instance_;

inline constexpr PrDeviceList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : devices_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PrDeviceList::PrDeviceList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrDeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDeviceListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDeviceListDefaultTypeInternal() {}
  union {
    PrDeviceList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDeviceListDefaultTypeInternal _PrDeviceList_default_instance_;
}  // namespace rocvad
static ::_pb::Metadata file_level_metadata_driver_5fprotocol_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_driver_5fprotocol_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_driver_5fprotocol_2eproto = nullptr;
const ::uint32_t
    TableStruct_driver_5fprotocol_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rocvad::PrNone, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDriverInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDriverInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDriverInfo, _impl_.commit_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _impl_.text_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceSelector, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceSelector, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceSelector, _impl_.Selector_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.local_config_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.local_endpoints_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.remote_endpoints_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.NetworkConfig_),
        ~0u,
        3,
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceList, _impl_.devices_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointRequest, _impl_.device_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointRequest, _impl_.endpoint_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_.slot_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_.interface_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_.uri_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _impl_.sample_rate_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _impl_.channel_layout_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.packet_encoding_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.packet_length_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.packet_interleaving_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.fec_encoding_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.fec_block_source_packets_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.fec_block_repair_packets_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.target_latency_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.min_latency_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.max_latency_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.latency_tuner_backend_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.latency_tuner_profile_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.resampler_backend_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.resampler_profile_),
        4,
        0,
        5,
        6,
        7,
        8,
        1,
        2,
        3,
        9,
        10,
        11,
        12,
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.target_latency_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.min_latency_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.max_latency_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.latency_tuner_backend_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.latency_tuner_profile_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.resampler_backend_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.resampler_profile_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.no_playback_timeout_),
        PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.choppy_playback_timeout_),
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        3,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::rocvad::PrNone)},
        {8, -1, -1, sizeof(::rocvad::PrDriverInfo)},
        {18, 29, -1, sizeof(::rocvad::PrLogEntry)},
        {32, -1, -1, sizeof(::rocvad::PrDeviceSelector)},
        {43, 61, -1, sizeof(::rocvad::PrDeviceInfo)},
        {70, -1, -1, sizeof(::rocvad::PrDeviceList)},
        {79, 89, -1, sizeof(::rocvad::PrEndpointRequest)},
        {91, 102, -1, sizeof(::rocvad::PrEndpointInfo)},
        {105, 115, -1, sizeof(::rocvad::PrLocalConfig)},
        {117, 138, -1, sizeof(::rocvad::PrSenderConfig)},
        {151, 168, -1, sizeof(::rocvad::PrReceiverConfig)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::rocvad::_PrNone_default_instance_._instance,
    &::rocvad::_PrDriverInfo_default_instance_._instance,
    &::rocvad::_PrLogEntry_default_instance_._instance,
    &::rocvad::_PrDeviceSelector_default_instance_._instance,
    &::rocvad::_PrDeviceInfo_default_instance_._instance,
    &::rocvad::_PrDeviceList_default_instance_._instance,
    &::rocvad::_PrEndpointRequest_default_instance_._instance,
    &::rocvad::_PrEndpointInfo_default_instance_._instance,
    &::rocvad::_PrLocalConfig_default_instance_._instance,
    &::rocvad::_PrSenderConfig_default_instance_._instance,
    &::rocvad::_PrReceiverConfig_default_instance_._instance,
};
const char descriptor_table_protodef_driver_5fprotocol_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025driver_protocol.proto\022\006rocvad\032\036google/"
    "protobuf/duration.proto\032\037google/protobuf"
    "/timestamp.proto\"\010\n\006PrNone\"/\n\014PrDriverIn"
    "fo\022\017\n\007version\030\001 \001(\t\022\016\n\006commit\030\002 \001(\t\"\265\001\n\n"
    "PrLogEntry\022(\n\004time\030\001 \001(\0132\032.google.protob"
    "uf.Timestamp\022\'\n\005level\030\002 \001(\0162\030.rocvad.PrL"
    "ogEntry.Level\022\014\n\004text\030\003 \001(\t\"F\n\005Level\022\010\n\004"
    "CRIT\020\000\022\t\n\005ERROR\020\001\022\010\n\004WARN\020\002\022\010\n\004INFO\020\003\022\t\n"
    "\005DEBUG\020\004\022\t\n\005TRACE\020\005\">\n\020PrDeviceSelector\022"
    "\017\n\005index\030\001 \001(\rH\000\022\r\n\003uid\030\002 \001(\tH\000B\n\n\010Selec"
    "tor\"\215\003\n\014PrDeviceInfo\022\"\n\004type\030\001 \001(\0162\024.roc"
    "vad.PrDeviceType\022\022\n\005index\030\002 \001(\rH\001\210\001\001\022\020\n\003"
    "uid\030\003 \001(\tH\002\210\001\001\022\021\n\004name\030\004 \001(\tH\003\210\001\001\022+\n\014loc"
    "al_config\030\005 \001(\0132\025.rocvad.PrLocalConfig\022/"
    "\n\rsender_config\030\006 \001(\0132\026.rocvad.PrSenderC"
    "onfigH\000\0223\n\017receiver_config\030\007 \001(\0132\030.rocva"
    "d.PrReceiverConfigH\000\022/\n\017local_endpoints\030"
    "\010 \003(\0132\026.rocvad.PrEndpointInfo\0220\n\020remote_"
    "endpoints\030\t \003(\0132\026.rocvad.PrEndpointInfoB"
    "\017\n\rNetworkConfigB\010\n\006_indexB\006\n\004_uidB\007\n\005_n"
    "ame\"5\n\014PrDeviceList\022%\n\007devices\030\001 \003(\0132\024.r"
    "ocvad.PrDeviceInfo\"g\n\021PrEndpointRequest\022"
    "(\n\006device\030\001 \001(\0132\030.rocvad.PrDeviceSelecto"
    "r\022(\n\010endpoint\030\002 \001(\0132\026.rocvad.PrEndpointI"
    "nfo\"a\n\016PrEndpointInfo\022\021\n\004slot\030\001 \001(\rH\000\210\001\001"
    "\022&\n\tinterface\030\002 \001(\0162\023.rocvad.PrInterface"
    "\022\013\n\003uri\030\003 \001(\tB\007\n\005_slot\"\202\001\n\rPrLocalConfig"
    "\022\030\n\013sample_rate\030\001 \001(\rH\000\210\001\001\0224\n\016channel_la"
    "yout\030\002 \001(\0162\027.rocvad.PrChannelLayoutH\001\210\001\001"
    "B\016\n\014_sample_rateB\021\n\017_channel_layout\"\335\007\n\016"
    "PrSenderConfig\0226\n\017packet_encoding\030\001 \001(\0162"
    "\030.rocvad.PrPacketEncodingH\000\210\001\001\0225\n\rpacket"
    "_length\030\002 \001(\0132\031.google.protobuf.Duration"
    "H\001\210\001\001\022 \n\023packet_interleaving\030\003 \001(\010H\002\210\001\001\022"
    "0\n\014fec_encoding\030\004 \001(\0162\025.rocvad.PrFecEnco"
    "dingH\003\210\001\001\022%\n\030fec_block_source_packets\030\005 "
    "\001(\rH\004\210\001\001\022%\n\030fec_block_repair_packets\030\006 \001"
    "(\rH\005\210\001\001\0226\n\016target_latency\030\007 \001(\0132\031.google"
    ".protobuf.DurationH\006\210\001\001\0223\n\013min_latency\030\010"
    " \001(\0132\031.google.protobuf.DurationH\007\210\001\001\0223\n\013"
    "max_latency\030\t \001(\0132\031.google.protobuf.Dura"
    "tionH\010\210\001\001\022A\n\025latency_tuner_backend\030\n \001(\016"
    "2\035.rocvad.PrLatencyTunerBackendH\t\210\001\001\022A\n\025"
    "latency_tuner_profile\030\013 \001(\0162\035.rocvad.PrL"
    "atencyTunerProfileH\n\210\001\001\022:\n\021resampler_bac"
    "kend\030\014 \001(\0162\032.rocvad.PrResamplerBackendH\013"
    "\210\001\001\022:\n\021resampler_profile\030\r \001(\0162\032.rocvad."
    "PrResamplerProfileH\014\210\001\001B\022\n\020_packet_encod"
    "ingB\020\n\016_packet_lengthB\026\n\024_packet_interle"
    "avingB\017\n\r_fec_encodingB\033\n\031_fec_block_sou"
    "rce_packetsB\033\n\031_fec_block_repair_packets"
    "B\021\n\017_target_latencyB\016\n\014_min_latencyB\016\n\014_"
    "max_latencyB\030\n\026_latency_tuner_backendB\030\n"
    "\026_latency_tuner_profileB\024\n\022_resampler_ba"
    "ckendB\024\n\022_resampler_profile\"\367\005\n\020PrReceiv"
    "erConfig\0226\n\016target_latency\030\001 \001(\0132\031.googl"
    "e.protobuf.DurationH\000\210\001\001\0223\n\013min_latency\030"
    "\002 \001(\0132\031.google.protobuf.DurationH\001\210\001\001\0223\n"
    "\013max_latency\030\003 \001(\0132\031.google.protobuf.Dur"
    "ationH\002\210\001\001\022A\n\025latency_tuner_backend\030\004 \001("
    "\0162\035.rocvad.PrLatencyTunerBackendH\003\210\001\001\022A\n"
    "\025latency_tuner_profile\030\005 \001(\0162\035.rocvad.Pr"
    "LatencyTunerProfileH\004\210\001\001\022:\n\021resampler_ba"
    "ckend\030\006 \001(\0162\032.rocvad.PrResamplerBackendH"
    "\005\210\001\001\022:\n\021resampler_profile\030\007 \001(\0162\032.rocvad"
    ".PrResamplerProfileH\006\210\001\001\022;\n\023no_playback_"
    "timeout\030\010 \001(\0132\031.google.protobuf.Duration"
    "H\007\210\001\001\022\?\n\027choppy_playback_timeout\030\t \001(\0132\031"
    ".google.protobuf.DurationH\010\210\001\001B\021\n\017_targe"
    "t_latencyB\016\n\014_min_latencyB\016\n\014_max_latenc"
    "yB\030\n\026_latency_tuner_backendB\030\n\026_latency_"
    "tuner_profileB\024\n\022_resampler_backendB\024\n\022_"
    "resampler_profileB\026\n\024_no_playback_timeou"
    "tB\032\n\030_choppy_playback_timeout*F\n\014PrDevic"
    "eType\022\031\n\025PR_DEVICE_TYPE_SENDER\020\000\022\033\n\027PR_D"
    "EVICE_TYPE_RECEIVER\020\001*\212\001\n\013PrInterface\022\035\n"
    "\031PR_INTERFACE_CONSOLIDATED\020\000\022\035\n\031PR_INTER"
    "FACE_AUDIO_SOURCE\020\001\022\035\n\031PR_INTERFACE_AUDI"
    "O_REPAIR\020\002\022\036\n\032PR_INTERFACE_AUDIO_CONTROL"
    "\020\003*K\n\017PrChannelLayout\022\032\n\026PR_CHANNEL_LAYO"
    "UT_MONO\020\000\022\034\n\030PR_CHANNEL_LAYOUT_STEREO\020\001*"
    "^\n\020PrPacketEncoding\022#\n\037PR_PACKET_ENCODIN"
    "G_AVP_L16_MONO\020\000\022%\n!PR_PACKET_ENCODING_A"
    "VP_L16_STEREO\020\001*j\n\rPrFecEncoding\022\033\n\027PR_F"
    "EC_ENCODING_DISABLE\020\000\022\030\n\024PR_FEC_ENCODING"
    "_RS8M\020\001\022\"\n\036PR_FEC_ENCODING_LDPC_STAIRCAS"
    "E\020\002*_\n\025PrLatencyTunerBackend\022$\n PR_LATEN"
    "CY_TUNER_BACKEND_DEFAULT\020\000\022 \n\034PR_LATENCY"
    "_TUNER_BACKEND_NIQ\020\002*\261\001\n\025PrLatencyTunerP"
    "rofile\022$\n PR_LATENCY_TUNER_PROFILE_DEFAU"
    "LT\020\000\022#\n\037PR_LATENCY_TUNER_PROFILE_INTACT\020"
    "\001\022\'\n#PR_LATENCY_TUNER_PROFILE_RESPONSIVE"
    "\020\002\022$\n PR_LATENCY_TUNER_PROFILE_GRADUAL\020\003"
    "*\233\001\n\022PrResamplerBackend\022 \n\034PR_RESAMPLER_"
    "BACKEND_DEFAULT\020\000\022 \n\034PR_RESAMPLER_BACKEN"
    "D_BUILTIN\020\001\022\036\n\032PR_RESAMPLER_BACKEND_SPEE"
    "X\020\002\022!\n\035PR_RESAMPLER_BACKEND_SPEEXDEC\020\003*\224"
    "\001\n\022PrResamplerProfile\022 \n\034PR_RESAMPLER_PR"
    "OFILE_DEFAULT\020\000\022\035\n\031PR_RESAMPLER_PROFILE_"
    "HIGH\020\001\022\037\n\033PR_RESAMPLER_PROFILE_MEDIUM\020\002\022"
    "\034\n\030PR_RESAMPLER_PROFILE_LOW\020\0032\231\004\n\016Driver"
    "Protocol\022(\n\004ping\022\016.rocvad.PrNone\032\016.rocva"
    "d.PrNone\"\000\0225\n\013driver_info\022\016.rocvad.PrNon"
    "e\032\024.rocvad.PrDriverInfo\"\000\0225\n\013stream_logs"
    "\022\016.rocvad.PrNone\032\022.rocvad.PrLogEntry\"\0000\001"
    "\0229\n\017get_all_devices\022\016.rocvad.PrNone\032\024.ro"
    "cvad.PrDeviceList\"\000\022>\n\nget_device\022\030.rocv"
    "ad.PrDeviceSelector\032\024.rocvad.PrDeviceInf"
    "o\"\000\022:\n\nadd_device\022\024.rocvad.PrDeviceInfo\032"
    "\024.rocvad.PrDeviceInfo\"\000\022;\n\rdelete_device"
    "\022\030.rocvad.PrDeviceSelector\032\016.rocvad.PrNo"
    "ne\"\000\022;\n\004bind\022\031.rocvad.PrEndpointRequest\032"
    "\026.rocvad.PrEndpointInfo\"\000\022>\n\007connect\022\031.r"
    "ocvad.PrEndpointRequest\032\026.rocvad.PrEndpo"
    "intInfo\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_driver_5fprotocol_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_driver_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_driver_5fprotocol_2eproto = {
    false,
    false,
    4577,
    descriptor_table_protodef_driver_5fprotocol_2eproto,
    "driver_protocol.proto",
    &descriptor_table_driver_5fprotocol_2eproto_once,
    descriptor_table_driver_5fprotocol_2eproto_deps,
    2,
    11,
    schemas,
    file_default_instances,
    TableStruct_driver_5fprotocol_2eproto::offsets,
    file_level_metadata_driver_5fprotocol_2eproto,
    file_level_enum_descriptors_driver_5fprotocol_2eproto,
    file_level_service_descriptors_driver_5fprotocol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_driver_5fprotocol_2eproto_getter() {
  return &descriptor_table_driver_5fprotocol_2eproto;
}
namespace rocvad {
const ::google::protobuf::EnumDescriptor* PrLogEntry_Level_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t PrLogEntry_Level_internal_data_[] = {
    393216u, 0u, };
bool PrLogEntry_Level_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PrLogEntry_Level PrLogEntry::CRIT;
constexpr PrLogEntry_Level PrLogEntry::ERROR;
constexpr PrLogEntry_Level PrLogEntry::WARN;
constexpr PrLogEntry_Level PrLogEntry::INFO;
constexpr PrLogEntry_Level PrLogEntry::DEBUG;
constexpr PrLogEntry_Level PrLogEntry::TRACE;
constexpr PrLogEntry_Level PrLogEntry::Level_MIN;
constexpr PrLogEntry_Level PrLogEntry::Level_MAX;
constexpr int PrLogEntry::Level_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* PrDeviceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t PrDeviceType_internal_data_[] = {
    131072u, 0u, };
bool PrDeviceType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* PrInterface_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t PrInterface_internal_data_[] = {
    262144u, 0u, };
bool PrInterface_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* PrChannelLayout_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t PrChannelLayout_internal_data_[] = {
    131072u, 0u, };
bool PrChannelLayout_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* PrPacketEncoding_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t PrPacketEncoding_internal_data_[] = {
    131072u, 0u, };
bool PrPacketEncoding_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* PrFecEncoding_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t PrFecEncoding_internal_data_[] = {
    196608u, 0u, };
bool PrFecEncoding_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* PrLatencyTunerBackend_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t PrLatencyTunerBackend_internal_data_[] = {
    65536u, 32u, 2u, };
bool PrLatencyTunerBackend_IsValid(int value) {
  return 0 <= value && value <= 2 && ((5u >> value) & 1) != 0;
}
const ::google::protobuf::EnumDescriptor* PrLatencyTunerProfile_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t PrLatencyTunerProfile_internal_data_[] = {
    262144u, 0u, };
bool PrLatencyTunerProfile_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* PrResamplerBackend_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t PrResamplerBackend_internal_data_[] = {
    262144u, 0u, };
bool PrResamplerBackend_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* PrResamplerProfile_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t PrResamplerProfile_internal_data_[] = {
    262144u, 0u, };
bool PrResamplerProfile_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class PrNone::_Internal {
 public:
};

PrNone::PrNone(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:rocvad.PrNone)
}
PrNone::PrNone(
    ::google::protobuf::Arena* arena,
    const PrNone& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  PrNone* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:rocvad.PrNone)
}









::google::protobuf::Metadata PrNone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[0]);
}
// ===================================================================

class PrDriverInfo::_Internal {
 public:
};

PrDriverInfo::PrDriverInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDriverInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrDriverInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : version_(arena, from.version_),
        commit_(arena, from.commit_),
        _cached_size_{0} {}

PrDriverInfo::PrDriverInfo(
    ::google::protobuf::Arena* arena,
    const PrDriverInfo& from)
    : ::google::protobuf::Message(arena) {
  PrDriverInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:rocvad.PrDriverInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrDriverInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : version_(arena),
        commit_(arena),
        _cached_size_{0} {}

inline void PrDriverInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PrDriverInfo::~PrDriverInfo() {
  // @@protoc_insertion_point(destructor:rocvad.PrDriverInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrDriverInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.version_.Destroy();
  _impl_.commit_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrDriverInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrDriverInfo, _impl_._cached_size_),
              false,
          },
          &PrDriverInfo::MergeImpl,
          &PrDriverInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrDriverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDriverInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.commit_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrDriverInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 41, 2> PrDriverInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PrDriverInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrDriverInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string commit = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PrDriverInfo, _impl_.commit_)}},
    // string version = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PrDriverInfo, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string version = 1;
    {PROTOBUF_FIELD_OFFSET(PrDriverInfo, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string commit = 2;
    {PROTOBUF_FIELD_OFFSET(PrDriverInfo, _impl_.commit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\7\6\0\0\0\0\0"
    "rocvad.PrDriverInfo"
    "version"
    "commit"
  }},
};

::uint8_t* PrDriverInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDriverInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocvad.PrDriverInfo.version");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string commit = 2;
  if (!this->_internal_commit().empty()) {
    const std::string& _s = this->_internal_commit();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocvad.PrDriverInfo.commit");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDriverInfo)
  return target;
}

::size_t PrDriverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDriverInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string commit = 2;
  if (!this->_internal_commit().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_commit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrDriverInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrDriverInfo*>(&to_msg);
  auto& from = static_cast<const PrDriverInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDriverInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_commit().empty()) {
    _this->_internal_set_commit(from._internal_commit());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrDriverInfo::CopyFrom(const PrDriverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDriverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrDriverInfo::IsInitialized() const {
  return true;
}

void PrDriverInfo::InternalSwap(PrDriverInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commit_, &other->_impl_.commit_, arena);
}

::google::protobuf::Metadata PrDriverInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[1]);
}
// ===================================================================

class PrLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<PrLogEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_._has_bits_);
};

void PrLogEntry::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PrLogEntry::PrLogEntry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrLogEntry)
}
inline PROTOBUF_NDEBUG_INLINE PrLogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        text_(arena, from.text_) {}

PrLogEntry::PrLogEntry(
    ::google::protobuf::Arena* arena,
    const PrLogEntry& from)
    : ::google::protobuf::Message(arena) {
  PrLogEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:rocvad.PrLogEntry)
}
inline PROTOBUF_NDEBUG_INLINE PrLogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        text_(arena) {}

inline void PrLogEntry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, level_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::level_));
}
PrLogEntry::~PrLogEntry() {
  // @@protoc_insertion_point(destructor:rocvad.PrLogEntry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrLogEntry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  delete _impl_.time_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrLogEntry::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_._cached_size_),
              false,
          },
          &PrLogEntry::MergeImpl,
          &PrLogEntry::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrLogEntry)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrLogEntry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 30, 2> PrLogEntry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PrLogEntry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrLogEntry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp time = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.time_)}},
    // .rocvad.PrLogEntry.Level level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrLogEntry, _impl_.level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.level_)}},
    // string text = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp time = 1;
    {PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rocvad.PrLogEntry.Level level = 2;
    {PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string text = 3;
    {PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\21\0\0\4\0\0\0\0"
    "rocvad.PrLogEntry"
    "text"
  }},
};

::uint8_t* PrLogEntry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrLogEntry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.time_, _impl_.time_->GetCachedSize(), target, stream);
  }

  // .rocvad.PrLogEntry.Level level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_level(), target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocvad.PrLogEntry.text");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrLogEntry)
  return target;
}

::size_t PrLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrLogEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .google.protobuf.Timestamp time = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
  }

  // .rocvad.PrLogEntry.Level level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrLogEntry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrLogEntry*>(&to_msg);
  auto& from = static_cast<const PrLogEntry&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrLogEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrLogEntry::CopyFrom(const PrLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrLogEntry::IsInitialized() const {
  return true;
}

void PrLogEntry::InternalSwap(PrLogEntry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.level_)
      + sizeof(PrLogEntry::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata PrLogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[2]);
}
// ===================================================================

class PrDeviceSelector::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceSelector, _impl_._oneof_case_);
};

PrDeviceSelector::PrDeviceSelector(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDeviceSelector)
}
inline PROTOBUF_NDEBUG_INLINE PrDeviceSelector::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : Selector_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

PrDeviceSelector::PrDeviceSelector(
    ::google::protobuf::Arena* arena,
    const PrDeviceSelector& from)
    : ::google::protobuf::Message(arena) {
  PrDeviceSelector* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (Selector_case()) {
    case SELECTOR_NOT_SET:
      break;
      case kIndex:
        _impl_.Selector_.index_ = from._impl_.Selector_.index_;
        break;
      case kUid:
        new (&_impl_.Selector_.uid_) decltype(_impl_.Selector_.uid_){arena, from._impl_.Selector_.uid_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:rocvad.PrDeviceSelector)
}
inline PROTOBUF_NDEBUG_INLINE PrDeviceSelector::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : Selector_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void PrDeviceSelector::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PrDeviceSelector::~PrDeviceSelector() {
  // @@protoc_insertion_point(destructor:rocvad.PrDeviceSelector)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrDeviceSelector::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_Selector()) {
    clear_Selector();
  }
  _impl_.~Impl_();
}

void PrDeviceSelector::clear_Selector() {
// @@protoc_insertion_point(one_of_clear_start:rocvad.PrDeviceSelector)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (Selector_case()) {
    case kIndex: {
      // No need to clear
      break;
    }
    case kUid: {
      _impl_.Selector_.uid_.Destroy();
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SELECTOR_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
PrDeviceSelector::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrDeviceSelector, _impl_._cached_size_),
              false,
          },
          &PrDeviceSelector::MergeImpl,
          &PrDeviceSelector::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrDeviceSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDeviceSelector)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Selector();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrDeviceSelector::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 35, 2> PrDeviceSelector::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PrDeviceSelector_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrDeviceSelector>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(PrDeviceSelector, _impl_.Selector_.index_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt32)},
    // string uid = 2;
    {PROTOBUF_FIELD_OFFSET(PrDeviceSelector, _impl_.Selector_.uid_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\0\3\0\0\0\0\0"
    "rocvad.PrDeviceSelector"
    "uid"
  }},
};

::uint8_t* PrDeviceSelector::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDeviceSelector)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (Selector_case()) {
    case kIndex: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this->_internal_index(), target);
      break;
    }
    case kUid: {
      const std::string& _s = this->_internal_uid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocvad.PrDeviceSelector.uid");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDeviceSelector)
  return target;
}

::size_t PrDeviceSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDeviceSelector)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Selector_case()) {
    // uint32 index = 1;
    case kIndex: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_index());
      break;
    }
    // string uid = 2;
    case kUid: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_uid());
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrDeviceSelector::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrDeviceSelector*>(&to_msg);
  auto& from = static_cast<const PrDeviceSelector&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDeviceSelector)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_Selector();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kIndex: {
        _this->_impl_.Selector_.index_ = from._impl_.Selector_.index_;
        break;
      }
      case kUid: {
        if (oneof_needs_init) {
          _this->_impl_.Selector_.uid_.InitDefault();
        }
        _this->_impl_.Selector_.uid_.Set(from._internal_uid(), arena);
        break;
      }
      case SELECTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrDeviceSelector::CopyFrom(const PrDeviceSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDeviceSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrDeviceSelector::IsInitialized() const {
  return true;
}

void PrDeviceSelector::InternalSwap(PrDeviceSelector* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Selector_, other->_impl_.Selector_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PrDeviceSelector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[3]);
}
// ===================================================================

class PrDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PrDeviceInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_._oneof_case_);
};

void PrDeviceInfo::set_allocated_sender_config(::rocvad::PrSenderConfig* sender_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_NetworkConfig();
  if (sender_config) {
    ::google::protobuf::Arena* submessage_arena = sender_config->GetArena();
    if (message_arena != submessage_arena) {
      sender_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, sender_config, submessage_arena);
    }
    set_has_sender_config();
    _impl_.NetworkConfig_.sender_config_ = sender_config;
  }
  // @@protoc_insertion_point(field_set_allocated:rocvad.PrDeviceInfo.sender_config)
}
void PrDeviceInfo::set_allocated_receiver_config(::rocvad::PrReceiverConfig* receiver_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_NetworkConfig();
  if (receiver_config) {
    ::google::protobuf::Arena* submessage_arena = receiver_config->GetArena();
    if (message_arena != submessage_arena) {
      receiver_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, receiver_config, submessage_arena);
    }
    set_has_receiver_config();
    _impl_.NetworkConfig_.receiver_config_ = receiver_config;
  }
  // @@protoc_insertion_point(field_set_allocated:rocvad.PrDeviceInfo.receiver_config)
}
PrDeviceInfo::PrDeviceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDeviceInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrDeviceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        local_endpoints_{visibility, arena, from.local_endpoints_},
        remote_endpoints_{visibility, arena, from.remote_endpoints_},
        uid_(arena, from.uid_),
        name_(arena, from.name_),
        NetworkConfig_{},
        _oneof_case_{from._oneof_case_[0]} {}

PrDeviceInfo::PrDeviceInfo(
    ::google::protobuf::Arena* arena,
    const PrDeviceInfo& from)
    : ::google::protobuf::Message(arena) {
  PrDeviceInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.local_config_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::rocvad::PrLocalConfig>(
                              arena, *from._impl_.local_config_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, index_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::index_));
  switch (NetworkConfig_case()) {
    case NETWORKCONFIG_NOT_SET:
      break;
      case kSenderConfig:
        _impl_.NetworkConfig_.sender_config_ = ::google::protobuf::Message::CopyConstruct<::rocvad::PrSenderConfig>(arena, *from._impl_.NetworkConfig_.sender_config_);
        break;
      case kReceiverConfig:
        _impl_.NetworkConfig_.receiver_config_ = ::google::protobuf::Message::CopyConstruct<::rocvad::PrReceiverConfig>(arena, *from._impl_.NetworkConfig_.receiver_config_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:rocvad.PrDeviceInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrDeviceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        local_endpoints_{visibility, arena},
        remote_endpoints_{visibility, arena},
        uid_(arena),
        name_(arena),
        NetworkConfig_{},
        _oneof_case_{} {}

inline void PrDeviceInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, local_config_),
           0,
           offsetof(Impl_, index_) -
               offsetof(Impl_, local_config_) +
               sizeof(Impl_::index_));
}
PrDeviceInfo::~PrDeviceInfo() {
  // @@protoc_insertion_point(destructor:rocvad.PrDeviceInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrDeviceInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  delete _impl_.local_config_;
  if (has_NetworkConfig()) {
    clear_NetworkConfig();
  }
  _impl_.~Impl_();
}

void PrDeviceInfo::clear_NetworkConfig() {
// @@protoc_insertion_point(one_of_clear_start:rocvad.PrDeviceInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (NetworkConfig_case()) {
    case kSenderConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.NetworkConfig_.sender_config_;
      }
      break;
    }
    case kReceiverConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.NetworkConfig_.receiver_config_;
      }
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NETWORKCONFIG_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
PrDeviceInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_._cached_size_),
              false,
          },
          &PrDeviceInfo::MergeImpl,
          &PrDeviceInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDeviceInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_endpoints_.Clear();
  _impl_.remote_endpoints_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.local_config_ != nullptr);
      _impl_.local_config_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_.index_ = 0u;
  clear_NetworkConfig();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrDeviceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 43, 2> PrDeviceInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PrDeviceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrDeviceInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .rocvad.PrDeviceType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrDeviceInfo, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.type_)}},
    // optional uint32 index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrDeviceInfo, _impl_.index_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.index_)}},
    // optional string uid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.uid_)}},
    // optional string name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.name_)}},
    // .rocvad.PrLocalConfig local_config = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.local_config_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .rocvad.PrEndpointInfo local_endpoints = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 3, PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.local_endpoints_)}},
    // repeated .rocvad.PrEndpointInfo remote_endpoints = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 4, PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.remote_endpoints_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .rocvad.PrDeviceType type = 1;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional uint32 index = 2;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.index_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string uid = 3;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.uid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string name = 4;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .rocvad.PrLocalConfig local_config = 5;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.local_config_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rocvad.PrSenderConfig sender_config = 6;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.NetworkConfig_.sender_config_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rocvad.PrReceiverConfig receiver_config = 7;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.NetworkConfig_.receiver_config_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .rocvad.PrEndpointInfo local_endpoints = 8;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.local_endpoints_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .rocvad.PrEndpointInfo remote_endpoints = 9;
    {PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.remote_endpoints_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rocvad::PrLocalConfig>()},
    {::_pbi::TcParser::GetTable<::rocvad::PrSenderConfig>()},
    {::_pbi::TcParser::GetTable<::rocvad::PrReceiverConfig>()},
    {::_pbi::TcParser::GetTable<::rocvad::PrEndpointInfo>()},
    {::_pbi::TcParser::GetTable<::rocvad::PrEndpointInfo>()},
  }}, {{
    "\23\0\0\3\4\0\0\0\0\0\0\0\0\0\0\0"
    "rocvad.PrDeviceInfo"
    "uid"
    "name"
  }},
};

::uint8_t* PrDeviceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDeviceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .rocvad.PrDeviceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_index(), target);
  }

  // optional string uid = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocvad.PrDeviceInfo.uid");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocvad.PrDeviceInfo.name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .rocvad.PrLocalConfig local_config = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.local_config_, _impl_.local_config_->GetCachedSize(), target, stream);
  }

  switch (NetworkConfig_case()) {
    case kSenderConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *_impl_.NetworkConfig_.sender_config_, _impl_.NetworkConfig_.sender_config_->GetCachedSize(), target, stream);
      break;
    }
    case kReceiverConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *_impl_.NetworkConfig_.receiver_config_, _impl_.NetworkConfig_.receiver_config_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // repeated .rocvad.PrEndpointInfo local_endpoints = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_local_endpoints_size());
       i < n; i++) {
    const auto& repfield = this->_internal_local_endpoints().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .rocvad.PrEndpointInfo remote_endpoints = 9;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_remote_endpoints_size());
       i < n; i++) {
    const auto& repfield = this->_internal_remote_endpoints().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            9, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDeviceInfo)
  return target;
}

::size_t PrDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDeviceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocvad.PrEndpointInfo local_endpoints = 8;
  total_size += 1UL * this->_internal_local_endpoints_size();
  for (const auto& msg : this->_internal_local_endpoints()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .rocvad.PrEndpointInfo remote_endpoints = 9;
  total_size += 1UL * this->_internal_remote_endpoints_size();
  for (const auto& msg : this->_internal_remote_endpoints()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string uid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_uid());
    }

    // optional string name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // .rocvad.PrLocalConfig local_config = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.local_config_);
    }

  }
  // .rocvad.PrDeviceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  switch (NetworkConfig_case()) {
    // .rocvad.PrSenderConfig sender_config = 6;
    case kSenderConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.NetworkConfig_.sender_config_);
      break;
    }
    // .rocvad.PrReceiverConfig receiver_config = 7;
    case kReceiverConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.NetworkConfig_.receiver_config_);
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrDeviceInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrDeviceInfo*>(&to_msg);
  auto& from = static_cast<const PrDeviceInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDeviceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_local_endpoints()->MergeFrom(
      from._internal_local_endpoints());
  _this->_internal_mutable_remote_endpoints()->MergeFrom(
      from._internal_remote_endpoints());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.local_config_ != nullptr);
      if (_this->_impl_.local_config_ == nullptr) {
        _this->_impl_.local_config_ =
            ::google::protobuf::Message::CopyConstruct<::rocvad::PrLocalConfig>(arena, *from._impl_.local_config_);
      } else {
        _this->_impl_.local_config_->MergeFrom(*from._impl_.local_config_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (cached_has_bits & 0x00000008u) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_NetworkConfig();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSenderConfig: {
        if (oneof_needs_init) {
          _this->_impl_.NetworkConfig_.sender_config_ =
              ::google::protobuf::Message::CopyConstruct<::rocvad::PrSenderConfig>(arena, *from._impl_.NetworkConfig_.sender_config_);
        } else {
          _this->_impl_.NetworkConfig_.sender_config_->MergeFrom(from._internal_sender_config());
        }
        break;
      }
      case kReceiverConfig: {
        if (oneof_needs_init) {
          _this->_impl_.NetworkConfig_.receiver_config_ =
              ::google::protobuf::Message::CopyConstruct<::rocvad::PrReceiverConfig>(arena, *from._impl_.NetworkConfig_.receiver_config_);
        } else {
          _this->_impl_.NetworkConfig_.receiver_config_->MergeFrom(from._internal_receiver_config());
        }
        break;
      }
      case NETWORKCONFIG_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrDeviceInfo::CopyFrom(const PrDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrDeviceInfo::IsInitialized() const {
  return true;
}

void PrDeviceInfo::InternalSwap(PrDeviceInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.local_endpoints_.InternalSwap(&other->_impl_.local_endpoints_);
  _impl_.remote_endpoints_.InternalSwap(&other->_impl_.remote_endpoints_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.index_)
      + sizeof(PrDeviceInfo::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.local_config_)>(
          reinterpret_cast<char*>(&_impl_.local_config_),
          reinterpret_cast<char*>(&other->_impl_.local_config_));
  swap(_impl_.NetworkConfig_, other->_impl_.NetworkConfig_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PrDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[4]);
}
// ===================================================================

class PrDeviceList::_Internal {
 public:
};

PrDeviceList::PrDeviceList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDeviceList)
}
inline PROTOBUF_NDEBUG_INLINE PrDeviceList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : devices_{visibility, arena, from.devices_},
        _cached_size_{0} {}

PrDeviceList::PrDeviceList(
    ::google::protobuf::Arena* arena,
    const PrDeviceList& from)
    : ::google::protobuf::Message(arena) {
  PrDeviceList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:rocvad.PrDeviceList)
}
inline PROTOBUF_NDEBUG_INLINE PrDeviceList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : devices_{visibility, arena},
        _cached_size_{0} {}

inline void PrDeviceList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PrDeviceList::~PrDeviceList() {
  // @@protoc_insertion_point(destructor:rocvad.PrDeviceList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrDeviceList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrDeviceList::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrDeviceList, _impl_._cached_size_),
              false,
          },
          &PrDeviceList::MergeImpl,
          &PrDeviceList::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDeviceList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrDeviceList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PrDeviceList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PrDeviceList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrDeviceList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .rocvad.PrDeviceInfo devices = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PrDeviceList, _impl_.devices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .rocvad.PrDeviceInfo devices = 1;
    {PROTOBUF_FIELD_OFFSET(PrDeviceList, _impl_.devices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rocvad::PrDeviceInfo>()},
  }}, {{
  }},
};

::uint8_t* PrDeviceList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDeviceList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .rocvad.PrDeviceInfo devices = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_devices_size());
       i < n; i++) {
    const auto& repfield = this->_internal_devices().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDeviceList)
  return target;
}

::size_t PrDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDeviceList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocvad.PrDeviceInfo devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_internal_devices()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrDeviceList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrDeviceList*>(&to_msg);
  auto& from = static_cast<const PrDeviceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDeviceList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_devices()->MergeFrom(
      from._internal_devices());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrDeviceList::CopyFrom(const PrDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrDeviceList::IsInitialized() const {
  return true;
}

void PrDeviceList::InternalSwap(PrDeviceList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::google::protobuf::Metadata PrDeviceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[5]);
}
// ===================================================================

class PrEndpointRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PrEndpointRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_._has_bits_);
};

PrEndpointRequest::PrEndpointRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrEndpointRequest)
}
inline PROTOBUF_NDEBUG_INLINE PrEndpointRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PrEndpointRequest::PrEndpointRequest(
    ::google::protobuf::Arena* arena,
    const PrEndpointRequest& from)
    : ::google::protobuf::Message(arena) {
  PrEndpointRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.device_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::rocvad::PrDeviceSelector>(
                              arena, *from._impl_.device_)
                        : nullptr;
  _impl_.endpoint_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::rocvad::PrEndpointInfo>(
                              arena, *from._impl_.endpoint_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:rocvad.PrEndpointRequest)
}
inline PROTOBUF_NDEBUG_INLINE PrEndpointRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PrEndpointRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, device_),
           0,
           offsetof(Impl_, endpoint_) -
               offsetof(Impl_, device_) +
               sizeof(Impl_::endpoint_));
}
PrEndpointRequest::~PrEndpointRequest() {
  // @@protoc_insertion_point(destructor:rocvad.PrEndpointRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrEndpointRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.device_;
  delete _impl_.endpoint_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrEndpointRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_._cached_size_),
              false,
          },
          &PrEndpointRequest::MergeImpl,
          &PrEndpointRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrEndpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrEndpointRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.device_ != nullptr);
      _impl_.device_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.endpoint_ != nullptr);
      _impl_.endpoint_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrEndpointRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PrEndpointRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PrEndpointRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrEndpointRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .rocvad.PrEndpointInfo endpoint = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.endpoint_)}},
    // .rocvad.PrDeviceSelector device = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.device_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .rocvad.PrDeviceSelector device = 1;
    {PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.device_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rocvad.PrEndpointInfo endpoint = 2;
    {PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.endpoint_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rocvad::PrDeviceSelector>()},
    {::_pbi::TcParser::GetTable<::rocvad::PrEndpointInfo>()},
  }}, {{
  }},
};

::uint8_t* PrEndpointRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrEndpointRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .rocvad.PrDeviceSelector device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.device_, _impl_.device_->GetCachedSize(), target, stream);
  }

  // .rocvad.PrEndpointInfo endpoint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.endpoint_, _impl_.endpoint_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrEndpointRequest)
  return target;
}

::size_t PrEndpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrEndpointRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .rocvad.PrDeviceSelector device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.device_);
    }

    // .rocvad.PrEndpointInfo endpoint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.endpoint_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrEndpointRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrEndpointRequest*>(&to_msg);
  auto& from = static_cast<const PrEndpointRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrEndpointRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.device_ != nullptr);
      if (_this->_impl_.device_ == nullptr) {
        _this->_impl_.device_ =
            ::google::protobuf::Message::CopyConstruct<::rocvad::PrDeviceSelector>(arena, *from._impl_.device_);
      } else {
        _this->_impl_.device_->MergeFrom(*from._impl_.device_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.endpoint_ != nullptr);
      if (_this->_impl_.endpoint_ == nullptr) {
        _this->_impl_.endpoint_ =
            ::google::protobuf::Message::CopyConstruct<::rocvad::PrEndpointInfo>(arena, *from._impl_.endpoint_);
      } else {
        _this->_impl_.endpoint_->MergeFrom(*from._impl_.endpoint_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrEndpointRequest::CopyFrom(const PrEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrEndpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrEndpointRequest::IsInitialized() const {
  return true;
}

void PrEndpointRequest::InternalSwap(PrEndpointRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.endpoint_)
      + sizeof(PrEndpointRequest::_impl_.endpoint_)
      - PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.device_)>(
          reinterpret_cast<char*>(&_impl_.device_),
          reinterpret_cast<char*>(&other->_impl_.device_));
}

::google::protobuf::Metadata PrEndpointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[6]);
}
// ===================================================================

class PrEndpointInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PrEndpointInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_._has_bits_);
};

PrEndpointInfo::PrEndpointInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrEndpointInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrEndpointInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uri_(arena, from.uri_) {}

PrEndpointInfo::PrEndpointInfo(
    ::google::protobuf::Arena* arena,
    const PrEndpointInfo& from)
    : ::google::protobuf::Message(arena) {
  PrEndpointInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, slot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, slot_),
           offsetof(Impl_, interface_) -
               offsetof(Impl_, slot_) +
               sizeof(Impl_::interface_));

  // @@protoc_insertion_point(copy_constructor:rocvad.PrEndpointInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrEndpointInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uri_(arena) {}

inline void PrEndpointInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, slot_),
           0,
           offsetof(Impl_, interface_) -
               offsetof(Impl_, slot_) +
               sizeof(Impl_::interface_));
}
PrEndpointInfo::~PrEndpointInfo() {
  // @@protoc_insertion_point(destructor:rocvad.PrEndpointInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrEndpointInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrEndpointInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_._cached_size_),
              false,
          },
          &PrEndpointInfo::MergeImpl,
          &PrEndpointInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrEndpointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrEndpointInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.slot_ = 0u;
  _impl_.interface_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrEndpointInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 33, 2> PrEndpointInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PrEndpointInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrEndpointInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 slot = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrEndpointInfo, _impl_.slot_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.slot_)}},
    // .rocvad.PrInterface interface = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrEndpointInfo, _impl_.interface_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.interface_)}},
    // string uri = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.uri_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 slot = 1;
    {PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.slot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .rocvad.PrInterface interface = 2;
    {PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.interface_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string uri = 3;
    {PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.uri_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\0\0\3\0\0\0\0"
    "rocvad.PrEndpointInfo"
    "uri"
  }},
};

::uint8_t* PrEndpointInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrEndpointInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_slot(), target);
  }

  // .rocvad.PrInterface interface = 2;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_interface(), target);
  }

  // string uri = 3;
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocvad.PrEndpointInfo.uri");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrEndpointInfo)
  return target;
}

::size_t PrEndpointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrEndpointInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 3;
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // optional uint32 slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_slot());
  }

  // .rocvad.PrInterface interface = 2;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_interface());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrEndpointInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrEndpointInfo*>(&to_msg);
  auto& from = static_cast<const PrEndpointInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrEndpointInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.slot_ = from._impl_.slot_;
  }
  if (from._internal_interface() != 0) {
    _this->_impl_.interface_ = from._impl_.interface_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrEndpointInfo::CopyFrom(const PrEndpointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrEndpointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrEndpointInfo::IsInitialized() const {
  return true;
}

void PrEndpointInfo::InternalSwap(PrEndpointInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, &other->_impl_.uri_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.interface_)
      + sizeof(PrEndpointInfo::_impl_.interface_)
      - PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::google::protobuf::Metadata PrEndpointInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[7]);
}
// ===================================================================

class PrLocalConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PrLocalConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_._has_bits_);
};

PrLocalConfig::PrLocalConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrLocalConfig)
}
PrLocalConfig::PrLocalConfig(
    ::google::protobuf::Arena* arena, const PrLocalConfig& from)
    : PrLocalConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PrLocalConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PrLocalConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sample_rate_),
           0,
           offsetof(Impl_, channel_layout_) -
               offsetof(Impl_, sample_rate_) +
               sizeof(Impl_::channel_layout_));
}
PrLocalConfig::~PrLocalConfig() {
  // @@protoc_insertion_point(destructor:rocvad.PrLocalConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrLocalConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrLocalConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_._cached_size_),
              false,
          },
          &PrLocalConfig::MergeImpl,
          &PrLocalConfig::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrLocalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrLocalConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.sample_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_layout_) -
        reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.channel_layout_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrLocalConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PrLocalConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PrLocalConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrLocalConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .rocvad.PrChannelLayout channel_layout = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrLocalConfig, _impl_.channel_layout_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.channel_layout_)}},
    // optional uint32 sample_rate = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrLocalConfig, _impl_.sample_rate_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.sample_rate_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 sample_rate = 1;
    {PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.sample_rate_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .rocvad.PrChannelLayout channel_layout = 2;
    {PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.channel_layout_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PrLocalConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrLocalConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sample_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_sample_rate(), target);
  }

  // optional .rocvad.PrChannelLayout channel_layout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_channel_layout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrLocalConfig)
  return target;
}

::size_t PrLocalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrLocalConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 sample_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sample_rate());
    }

    // optional .rocvad.PrChannelLayout channel_layout = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_layout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrLocalConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrLocalConfig*>(&to_msg);
  auto& from = static_cast<const PrLocalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrLocalConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_layout_ = from._impl_.channel_layout_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrLocalConfig::CopyFrom(const PrLocalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrLocalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrLocalConfig::IsInitialized() const {
  return true;
}

void PrLocalConfig::InternalSwap(PrLocalConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.channel_layout_)
      + sizeof(PrLocalConfig::_impl_.channel_layout_)
      - PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.sample_rate_)>(
          reinterpret_cast<char*>(&_impl_.sample_rate_),
          reinterpret_cast<char*>(&other->_impl_.sample_rate_));
}

::google::protobuf::Metadata PrLocalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[8]);
}
// ===================================================================

class PrSenderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PrSenderConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_._has_bits_);
};

void PrSenderConfig::clear_packet_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.packet_length_ != nullptr) _impl_.packet_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PrSenderConfig::clear_target_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.target_latency_ != nullptr) _impl_.target_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PrSenderConfig::clear_min_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_latency_ != nullptr) _impl_.min_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PrSenderConfig::clear_max_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.max_latency_ != nullptr) _impl_.max_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PrSenderConfig::PrSenderConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrSenderConfig)
}
inline PROTOBUF_NDEBUG_INLINE PrSenderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PrSenderConfig::PrSenderConfig(
    ::google::protobuf::Arena* arena,
    const PrSenderConfig& from)
    : ::google::protobuf::Message(arena) {
  PrSenderConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.packet_length_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.packet_length_)
                        : nullptr;
  _impl_.target_latency_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.target_latency_)
                        : nullptr;
  _impl_.min_latency_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.min_latency_)
                        : nullptr;
  _impl_.max_latency_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.max_latency_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packet_encoding_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, packet_encoding_),
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, packet_encoding_) +
               sizeof(Impl_::resampler_profile_));

  // @@protoc_insertion_point(copy_constructor:rocvad.PrSenderConfig)
}
inline PROTOBUF_NDEBUG_INLINE PrSenderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PrSenderConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packet_length_),
           0,
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, packet_length_) +
               sizeof(Impl_::resampler_profile_));
}
PrSenderConfig::~PrSenderConfig() {
  // @@protoc_insertion_point(destructor:rocvad.PrSenderConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrSenderConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.packet_length_;
  delete _impl_.target_latency_;
  delete _impl_.min_latency_;
  delete _impl_.max_latency_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrSenderConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_._cached_size_),
              false,
          },
          &PrSenderConfig::MergeImpl,
          &PrSenderConfig::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrSenderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrSenderConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.packet_length_ != nullptr);
      _impl_.packet_length_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.target_latency_ != nullptr);
      _impl_.target_latency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.min_latency_ != nullptr);
      _impl_.min_latency_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.max_latency_ != nullptr);
      _impl_.max_latency_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.packet_encoding_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fec_block_source_packets_) -
        reinterpret_cast<char*>(&_impl_.packet_encoding_)) + sizeof(_impl_.fec_block_source_packets_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.fec_block_repair_packets_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.resampler_profile_) -
        reinterpret_cast<char*>(&_impl_.fec_block_repair_packets_)) + sizeof(_impl_.resampler_profile_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrSenderConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 4, 0, 2> PrSenderConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PrSenderConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrSenderConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .rocvad.PrPacketEncoding packet_encoding = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.packet_encoding_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_encoding_)}},
    // optional .google.protobuf.Duration packet_length = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_length_)}},
    // optional bool packet_interleaving = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PrSenderConfig, _impl_.packet_interleaving_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_interleaving_)}},
    // optional .rocvad.PrFecEncoding fec_encoding = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.fec_encoding_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.fec_encoding_)}},
    // optional uint32 fec_block_source_packets = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.fec_block_source_packets_), 7>(),
     {40, 7, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.fec_block_source_packets_)}},
    // optional uint32 fec_block_repair_packets = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.fec_block_repair_packets_), 8>(),
     {48, 8, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.fec_block_repair_packets_)}},
    // optional .google.protobuf.Duration target_latency = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.target_latency_)}},
    // optional .google.protobuf.Duration min_latency = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.min_latency_)}},
    // optional .google.protobuf.Duration max_latency = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.max_latency_)}},
    // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.latency_tuner_backend_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.latency_tuner_backend_)}},
    // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.latency_tuner_profile_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.latency_tuner_profile_)}},
    // optional .rocvad.PrResamplerBackend resampler_backend = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.resampler_backend_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.resampler_backend_)}},
    // optional .rocvad.PrResamplerProfile resampler_profile = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrSenderConfig, _impl_.resampler_profile_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.resampler_profile_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .rocvad.PrPacketEncoding packet_encoding = 1;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_encoding_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .google.protobuf.Duration packet_length = 2;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_length_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool packet_interleaving = 3;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_interleaving_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .rocvad.PrFecEncoding fec_encoding = 4;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.fec_encoding_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional uint32 fec_block_source_packets = 5;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.fec_block_source_packets_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 fec_block_repair_packets = 6;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.fec_block_repair_packets_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .google.protobuf.Duration target_latency = 7;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.target_latency_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration min_latency = 8;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.min_latency_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration max_latency = 9;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.max_latency_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 10;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.latency_tuner_backend_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 11;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.latency_tuner_profile_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rocvad.PrResamplerBackend resampler_backend = 12;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.resampler_backend_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rocvad.PrResamplerProfile resampler_profile = 13;
    {PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.resampler_profile_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
  }},
};

::uint8_t* PrSenderConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrSenderConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .rocvad.PrPacketEncoding packet_encoding = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_packet_encoding(), target);
  }

  // optional .google.protobuf.Duration packet_length = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.packet_length_, _impl_.packet_length_->GetCachedSize(), target, stream);
  }

  // optional bool packet_interleaving = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_packet_interleaving(), target);
  }

  // optional .rocvad.PrFecEncoding fec_encoding = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_fec_encoding(), target);
  }

  // optional uint32 fec_block_source_packets = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_fec_block_source_packets(), target);
  }

  // optional uint32 fec_block_repair_packets = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_fec_block_repair_packets(), target);
  }

  // optional .google.protobuf.Duration target_latency = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.target_latency_, _impl_.target_latency_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration min_latency = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *_impl_.min_latency_, _impl_.min_latency_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration max_latency = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.max_latency_, _impl_.max_latency_->GetCachedSize(), target, stream);
  }

  // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_latency_tuner_backend(), target);
  }

  // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_latency_tuner_profile(), target);
  }

  // optional .rocvad.PrResamplerBackend resampler_backend = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        12, this->_internal_resampler_backend(), target);
  }

  // optional .rocvad.PrResamplerProfile resampler_profile = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_resampler_profile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrSenderConfig)
  return target;
}

::size_t PrSenderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrSenderConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .google.protobuf.Duration packet_length = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.packet_length_);
    }

    // optional .google.protobuf.Duration target_latency = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_latency_);
    }

    // optional .google.protobuf.Duration min_latency = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_latency_);
    }

    // optional .google.protobuf.Duration max_latency = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.max_latency_);
    }

    // optional .rocvad.PrPacketEncoding packet_encoding = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_packet_encoding());
    }

    // optional bool packet_interleaving = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional .rocvad.PrFecEncoding fec_encoding = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_fec_encoding());
    }

    // optional uint32 fec_block_source_packets = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fec_block_source_packets());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 fec_block_repair_packets = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fec_block_repair_packets());
    }

    // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_backend());
    }

    // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_profile());
    }

    // optional .rocvad.PrResamplerBackend resampler_backend = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_backend());
    }

    // optional .rocvad.PrResamplerProfile resampler_profile = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_profile());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrSenderConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrSenderConfig*>(&to_msg);
  auto& from = static_cast<const PrSenderConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrSenderConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.packet_length_ != nullptr);
      if (_this->_impl_.packet_length_ == nullptr) {
        _this->_impl_.packet_length_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.packet_length_);
      } else {
        _this->_impl_.packet_length_->MergeFrom(*from._impl_.packet_length_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.target_latency_ != nullptr);
      if (_this->_impl_.target_latency_ == nullptr) {
        _this->_impl_.target_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.target_latency_);
      } else {
        _this->_impl_.target_latency_->MergeFrom(*from._impl_.target_latency_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.min_latency_ != nullptr);
      if (_this->_impl_.min_latency_ == nullptr) {
        _this->_impl_.min_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.min_latency_);
      } else {
        _this->_impl_.min_latency_->MergeFrom(*from._impl_.min_latency_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.max_latency_ != nullptr);
      if (_this->_impl_.max_latency_ == nullptr) {
        _this->_impl_.max_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.max_latency_);
      } else {
        _this->_impl_.max_latency_->MergeFrom(*from._impl_.max_latency_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.packet_encoding_ = from._impl_.packet_encoding_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.packet_interleaving_ = from._impl_.packet_interleaving_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fec_encoding_ = from._impl_.fec_encoding_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fec_block_source_packets_ = from._impl_.fec_block_source_packets_;
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.fec_block_repair_packets_ = from._impl_.fec_block_repair_packets_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.latency_tuner_backend_ = from._impl_.latency_tuner_backend_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.latency_tuner_profile_ = from._impl_.latency_tuner_profile_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.resampler_backend_ = from._impl_.resampler_backend_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.resampler_profile_ = from._impl_.resampler_profile_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrSenderConfig::CopyFrom(const PrSenderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrSenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrSenderConfig::IsInitialized() const {
  return true;
}

void PrSenderConfig::InternalSwap(PrSenderConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.resampler_profile_)
      + sizeof(PrSenderConfig::_impl_.resampler_profile_)
      - PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_length_)>(
          reinterpret_cast<char*>(&_impl_.packet_length_),
          reinterpret_cast<char*>(&other->_impl_.packet_length_));
}

::google::protobuf::Metadata PrSenderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[9]);
}
// ===================================================================

class PrReceiverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PrReceiverConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_._has_bits_);
};

void PrReceiverConfig::clear_target_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.target_latency_ != nullptr) _impl_.target_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PrReceiverConfig::clear_min_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_latency_ != nullptr) _impl_.min_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PrReceiverConfig::clear_max_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.max_latency_ != nullptr) _impl_.max_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PrReceiverConfig::clear_no_playback_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.no_playback_timeout_ != nullptr) _impl_.no_playback_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void PrReceiverConfig::clear_choppy_playback_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.choppy_playback_timeout_ != nullptr) _impl_.choppy_playback_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
PrReceiverConfig::PrReceiverConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrReceiverConfig)
}
inline PROTOBUF_NDEBUG_INLINE PrReceiverConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PrReceiverConfig::PrReceiverConfig(
    ::google::protobuf::Arena* arena,
    const PrReceiverConfig& from)
    : ::google::protobuf::Message(arena) {
  PrReceiverConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_latency_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.target_latency_)
                        : nullptr;
  _impl_.min_latency_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.min_latency_)
                        : nullptr;
  _impl_.max_latency_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.max_latency_)
                        : nullptr;
  _impl_.no_playback_timeout_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.no_playback_timeout_)
                        : nullptr;
  _impl_.choppy_playback_timeout_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.choppy_playback_timeout_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latency_tuner_backend_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latency_tuner_backend_),
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, latency_tuner_backend_) +
               sizeof(Impl_::resampler_profile_));

  // @@protoc_insertion_point(copy_constructor:rocvad.PrReceiverConfig)
}
inline PROTOBUF_NDEBUG_INLINE PrReceiverConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PrReceiverConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_latency_),
           0,
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, target_latency_) +
               sizeof(Impl_::resampler_profile_));
}
PrReceiverConfig::~PrReceiverConfig() {
  // @@protoc_insertion_point(destructor:rocvad.PrReceiverConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PrReceiverConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_latency_;
  delete _impl_.min_latency_;
  delete _impl_.max_latency_;
  delete _impl_.no_playback_timeout_;
  delete _impl_.choppy_playback_timeout_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PrReceiverConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_._cached_size_),
              false,
          },
          &PrReceiverConfig::MergeImpl,
          &PrReceiverConfig::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PrReceiverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrReceiverConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_latency_ != nullptr);
      _impl_.target_latency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.min_latency_ != nullptr);
      _impl_.min_latency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.max_latency_ != nullptr);
      _impl_.max_latency_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.no_playback_timeout_ != nullptr);
      _impl_.no_playback_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.choppy_playback_timeout_ != nullptr);
      _impl_.choppy_playback_timeout_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.latency_tuner_backend_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.resampler_backend_) -
        reinterpret_cast<char*>(&_impl_.latency_tuner_backend_)) + sizeof(_impl_.resampler_backend_));
  }
  _impl_.resampler_profile_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PrReceiverConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 0, 2> PrReceiverConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PrReceiverConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocvad::PrReceiverConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .google.protobuf.Duration target_latency = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.target_latency_)}},
    // optional .google.protobuf.Duration min_latency = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.min_latency_)}},
    // optional .google.protobuf.Duration max_latency = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.max_latency_)}},
    // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrReceiverConfig, _impl_.latency_tuner_backend_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.latency_tuner_backend_)}},
    // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrReceiverConfig, _impl_.latency_tuner_profile_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.latency_tuner_profile_)}},
    // optional .rocvad.PrResamplerBackend resampler_backend = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrReceiverConfig, _impl_.resampler_backend_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.resampler_backend_)}},
    // optional .rocvad.PrResamplerProfile resampler_profile = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PrReceiverConfig, _impl_.resampler_profile_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.resampler_profile_)}},
    // optional .google.protobuf.Duration no_playback_timeout = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.no_playback_timeout_)}},
    // optional .google.protobuf.Duration choppy_playback_timeout = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.choppy_playback_timeout_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .google.protobuf.Duration target_latency = 1;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.target_latency_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration min_latency = 2;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.min_latency_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration max_latency = 3;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.max_latency_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 4;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.latency_tuner_backend_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 5;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.latency_tuner_profile_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rocvad.PrResamplerBackend resampler_backend = 6;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.resampler_backend_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rocvad.PrResamplerProfile resampler_profile = 7;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.resampler_profile_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .google.protobuf.Duration no_playback_timeout = 8;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.no_playback_timeout_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration choppy_playback_timeout = 9;
    {PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.choppy_playback_timeout_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
  }},
};

::uint8_t* PrReceiverConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrReceiverConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Duration target_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.target_latency_, _impl_.target_latency_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration min_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.min_latency_, _impl_.min_latency_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration max_latency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.max_latency_, _impl_.max_latency_->GetCachedSize(), target, stream);
  }

  // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_latency_tuner_backend(), target);
  }

  // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_latency_tuner_profile(), target);
  }

  // optional .rocvad.PrResamplerBackend resampler_backend = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_resampler_backend(), target);
  }

  // optional .rocvad.PrResamplerProfile resampler_profile = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_resampler_profile(), target);
  }

  // optional .google.protobuf.Duration no_playback_timeout = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *_impl_.no_playback_timeout_, _impl_.no_playback_timeout_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration choppy_playback_timeout = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.choppy_playback_timeout_, _impl_.choppy_playback_timeout_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrReceiverConfig)
  return target;
}

::size_t PrReceiverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrReceiverConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .google.protobuf.Duration target_latency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_latency_);
    }

    // optional .google.protobuf.Duration min_latency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_latency_);
    }

    // optional .google.protobuf.Duration max_latency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.max_latency_);
    }

    // optional .google.protobuf.Duration no_playback_timeout = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.no_playback_timeout_);
    }

    // optional .google.protobuf.Duration choppy_playback_timeout = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.choppy_playback_timeout_);
    }

    // optional .rocvad.PrLatencyTunerBackend latency_tuner_backend = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_backend());
    }

    // optional .rocvad.PrLatencyTunerProfile latency_tuner_profile = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_profile());
    }

    // optional .rocvad.PrResamplerBackend resampler_backend = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_backend());
    }

  }
  // optional .rocvad.PrResamplerProfile resampler_profile = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_profile());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PrReceiverConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PrReceiverConfig*>(&to_msg);
  auto& from = static_cast<const PrReceiverConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrReceiverConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.target_latency_ != nullptr);
      if (_this->_impl_.target_latency_ == nullptr) {
        _this->_impl_.target_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.target_latency_);
      } else {
        _this->_impl_.target_latency_->MergeFrom(*from._impl_.target_latency_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.min_latency_ != nullptr);
      if (_this->_impl_.min_latency_ == nullptr) {
        _this->_impl_.min_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.min_latency_);
      } else {
        _this->_impl_.min_latency_->MergeFrom(*from._impl_.min_latency_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.max_latency_ != nullptr);
      if (_this->_impl_.max_latency_ == nullptr) {
        _this->_impl_.max_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.max_latency_);
      } else {
        _this->_impl_.max_latency_->MergeFrom(*from._impl_.max_latency_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.no_playback_timeout_ != nullptr);
      if (_this->_impl_.no_playback_timeout_ == nullptr) {
        _this->_impl_.no_playback_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.no_playback_timeout_);
      } else {
        _this->_impl_.no_playback_timeout_->MergeFrom(*from._impl_.no_playback_timeout_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.choppy_playback_timeout_ != nullptr);
      if (_this->_impl_.choppy_playback_timeout_ == nullptr) {
        _this->_impl_.choppy_playback_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.choppy_playback_timeout_);
      } else {
        _this->_impl_.choppy_playback_timeout_->MergeFrom(*from._impl_.choppy_playback_timeout_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.latency_tuner_backend_ = from._impl_.latency_tuner_backend_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.latency_tuner_profile_ = from._impl_.latency_tuner_profile_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.resampler_backend_ = from._impl_.resampler_backend_;
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_impl_.resampler_profile_ = from._impl_.resampler_profile_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PrReceiverConfig::CopyFrom(const PrReceiverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrReceiverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrReceiverConfig::IsInitialized() const {
  return true;
}

void PrReceiverConfig::InternalSwap(PrReceiverConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.resampler_profile_)
      + sizeof(PrReceiverConfig::_impl_.resampler_profile_)
      - PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.target_latency_)>(
          reinterpret_cast<char*>(&_impl_.target_latency_),
          reinterpret_cast<char*>(&other->_impl_.target_latency_));
}

::google::protobuf::Metadata PrReceiverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rocvad
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_driver_5fprotocol_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
