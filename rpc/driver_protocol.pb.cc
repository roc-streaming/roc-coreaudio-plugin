// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: driver_protocol.proto

#include "driver_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rocvad {
PROTOBUF_CONSTEXPR PrNone::PrNone(
    ::_pbi::ConstantInitialized) {}
struct PrNoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrNoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrNoneDefaultTypeInternal() {}
  union {
    PrNone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrNoneDefaultTypeInternal _PrNone_default_instance_;
PROTOBUF_CONSTEXPR PrDriverInfo::PrDriverInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.commit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrDriverInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDriverInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDriverInfoDefaultTypeInternal() {}
  union {
    PrDriverInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDriverInfoDefaultTypeInternal _PrDriverInfo_default_instance_;
PROTOBUF_CONSTEXPR PrLogEntry::PrLogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrLogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrLogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrLogEntryDefaultTypeInternal() {}
  union {
    PrLogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrLogEntryDefaultTypeInternal _PrLogEntry_default_instance_;
PROTOBUF_CONSTEXPR PrDeviceSelector::PrDeviceSelector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.Selector_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PrDeviceSelectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDeviceSelectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDeviceSelectorDefaultTypeInternal() {}
  union {
    PrDeviceSelector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDeviceSelectorDefaultTypeInternal _PrDeviceSelector_default_instance_;
PROTOBUF_CONSTEXPR PrDeviceInfo::PrDeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_endpoints_)*/{}
  , /*decltype(_impl_.remote_endpoints_)*/{}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_config_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.NetworkConfig_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PrDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDeviceInfoDefaultTypeInternal() {}
  union {
    PrDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDeviceInfoDefaultTypeInternal _PrDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR PrDeviceList::PrDeviceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrDeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrDeviceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrDeviceListDefaultTypeInternal() {}
  union {
    PrDeviceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrDeviceListDefaultTypeInternal _PrDeviceList_default_instance_;
PROTOBUF_CONSTEXPR PrEndpointRequest::PrEndpointRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_.endpoint_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrEndpointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrEndpointRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrEndpointRequestDefaultTypeInternal() {}
  union {
    PrEndpointRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrEndpointRequestDefaultTypeInternal _PrEndpointRequest_default_instance_;
PROTOBUF_CONSTEXPR PrEndpointInfo::PrEndpointInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.interface_)*/0} {}
struct PrEndpointInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrEndpointInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrEndpointInfoDefaultTypeInternal() {}
  union {
    PrEndpointInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrEndpointInfoDefaultTypeInternal _PrEndpointInfo_default_instance_;
PROTOBUF_CONSTEXPR PrLocalConfig::PrLocalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sample_rate_)*/0u
  , /*decltype(_impl_.channel_layout_)*/0} {}
struct PrLocalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrLocalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrLocalConfigDefaultTypeInternal() {}
  union {
    PrLocalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrLocalConfigDefaultTypeInternal _PrLocalConfig_default_instance_;
PROTOBUF_CONSTEXPR PrSenderConfig::PrSenderConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_length_)*/nullptr
  , /*decltype(_impl_.packet_encoding_)*/0
  , /*decltype(_impl_.fec_encoding_)*/0
  , /*decltype(_impl_.fec_block_source_packets_)*/0u
  , /*decltype(_impl_.fec_block_repair_packets_)*/0u} {}
struct PrSenderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrSenderConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrSenderConfigDefaultTypeInternal() {}
  union {
    PrSenderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrSenderConfigDefaultTypeInternal _PrSenderConfig_default_instance_;
PROTOBUF_CONSTEXPR PrReceiverConfig::PrReceiverConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_latency_)*/nullptr
  , /*decltype(_impl_.resampler_backend_)*/0
  , /*decltype(_impl_.resampler_profile_)*/0} {}
struct PrReceiverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrReceiverConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrReceiverConfigDefaultTypeInternal() {}
  union {
    PrReceiverConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrReceiverConfigDefaultTypeInternal _PrReceiverConfig_default_instance_;
}  // namespace rocvad
static ::_pb::Metadata file_level_metadata_driver_5fprotocol_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_driver_5fprotocol_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_driver_5fprotocol_2eproto = nullptr;

const uint32_t TableStruct_driver_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrNone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDriverInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDriverInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDriverInfo, _impl_.commit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLogEntry, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceSelector, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceSelector, _impl_.Selector_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.local_config_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.local_endpoints_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.remote_endpoints_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceInfo, _impl_.NetworkConfig_),
  ~0u,
  2,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrDeviceList, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointRequest, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointRequest, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_.interface_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrEndpointInfo, _impl_.uri_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrLocalConfig, _impl_.channel_layout_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.packet_encoding_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.packet_length_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.fec_encoding_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.fec_block_source_packets_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrSenderConfig, _impl_.fec_block_repair_packets_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.target_latency_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.resampler_backend_),
  PROTOBUF_FIELD_OFFSET(::rocvad::PrReceiverConfig, _impl_.resampler_profile_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rocvad::PrNone)},
  { 6, -1, -1, sizeof(::rocvad::PrDriverInfo)},
  { 14, -1, -1, sizeof(::rocvad::PrLogEntry)},
  { 23, -1, -1, sizeof(::rocvad::PrDeviceSelector)},
  { 32, 48, -1, sizeof(::rocvad::PrDeviceInfo)},
  { 57, -1, -1, sizeof(::rocvad::PrDeviceList)},
  { 64, -1, -1, sizeof(::rocvad::PrEndpointRequest)},
  { 72, 81, -1, sizeof(::rocvad::PrEndpointInfo)},
  { 84, 92, -1, sizeof(::rocvad::PrLocalConfig)},
  { 94, 105, -1, sizeof(::rocvad::PrSenderConfig)},
  { 110, 119, -1, sizeof(::rocvad::PrReceiverConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rocvad::_PrNone_default_instance_._instance,
  &::rocvad::_PrDriverInfo_default_instance_._instance,
  &::rocvad::_PrLogEntry_default_instance_._instance,
  &::rocvad::_PrDeviceSelector_default_instance_._instance,
  &::rocvad::_PrDeviceInfo_default_instance_._instance,
  &::rocvad::_PrDeviceList_default_instance_._instance,
  &::rocvad::_PrEndpointRequest_default_instance_._instance,
  &::rocvad::_PrEndpointInfo_default_instance_._instance,
  &::rocvad::_PrLocalConfig_default_instance_._instance,
  &::rocvad::_PrSenderConfig_default_instance_._instance,
  &::rocvad::_PrReceiverConfig_default_instance_._instance,
};

const char descriptor_table_protodef_driver_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025driver_protocol.proto\022\006rocvad\032\036google/"
  "protobuf/duration.proto\032\037google/protobuf"
  "/timestamp.proto\"\010\n\006PrNone\"/\n\014PrDriverIn"
  "fo\022\017\n\007version\030\001 \001(\t\022\016\n\006commit\030\002 \001(\t\"\265\001\n\n"
  "PrLogEntry\022(\n\004time\030\001 \001(\0132\032.google.protob"
  "uf.Timestamp\022\'\n\005level\030\002 \001(\0162\030.rocvad.PrL"
  "ogEntry.Level\022\014\n\004text\030\003 \001(\t\"F\n\005Level\022\010\n\004"
  "CRIT\020\000\022\t\n\005ERROR\020\001\022\010\n\004WARN\020\002\022\010\n\004INFO\020\003\022\t\n"
  "\005DEBUG\020\004\022\t\n\005TRACE\020\005\">\n\020PrDeviceSelector\022"
  "\017\n\005index\030\001 \001(\rH\000\022\r\n\003uid\030\002 \001(\tH\000B\n\n\010Selec"
  "tor\"\215\003\n\014PrDeviceInfo\022\"\n\004type\030\001 \001(\0162\024.roc"
  "vad.PrDeviceType\022\022\n\005index\030\002 \001(\rH\001\210\001\001\022\020\n\003"
  "uid\030\003 \001(\tH\002\210\001\001\022\021\n\004name\030\004 \001(\tH\003\210\001\001\022+\n\014loc"
  "al_config\030\005 \001(\0132\025.rocvad.PrLocalConfig\022/"
  "\n\rsender_config\030\006 \001(\0132\026.rocvad.PrSenderC"
  "onfigH\000\0223\n\017receiver_config\030\007 \001(\0132\030.rocva"
  "d.PrReceiverConfigH\000\022/\n\017local_endpoints\030"
  "\010 \003(\0132\026.rocvad.PrEndpointInfo\0220\n\020remote_"
  "endpoints\030\t \003(\0132\026.rocvad.PrEndpointInfoB"
  "\017\n\rNetworkConfigB\010\n\006_indexB\006\n\004_uidB\007\n\005_n"
  "ame\"5\n\014PrDeviceList\022%\n\007devices\030\001 \003(\0132\024.r"
  "ocvad.PrDeviceInfo\"g\n\021PrEndpointRequest\022"
  "(\n\006device\030\001 \001(\0132\030.rocvad.PrDeviceSelecto"
  "r\022(\n\010endpoint\030\002 \001(\0132\026.rocvad.PrEndpointI"
  "nfo\"a\n\016PrEndpointInfo\022\021\n\004slot\030\001 \001(\rH\000\210\001\001"
  "\022&\n\tinterface\030\002 \001(\0162\023.rocvad.PrInterface"
  "\022\013\n\003uri\030\003 \001(\tB\007\n\005_slot\"\202\001\n\rPrLocalConfig"
  "\022\030\n\013sample_rate\030\001 \001(\rH\000\210\001\001\0224\n\016channel_la"
  "yout\030\002 \001(\0162\027.rocvad.PrChannelLayoutH\001\210\001\001"
  "B\016\n\014_sample_rateB\021\n\017_channel_layout\"\360\002\n\016"
  "PrSenderConfig\0226\n\017packet_encoding\030\001 \001(\0162"
  "\030.rocvad.PrPacketEncodingH\000\210\001\001\0225\n\rpacket"
  "_length\030\002 \001(\0132\031.google.protobuf.Duration"
  "H\001\210\001\001\0220\n\014fec_encoding\030\003 \001(\0162\025.rocvad.PrF"
  "ecEncodingH\002\210\001\001\022%\n\030fec_block_source_pack"
  "ets\030\004 \001(\rH\003\210\001\001\022%\n\030fec_block_repair_packe"
  "ts\030\005 \001(\rH\004\210\001\001B\022\n\020_packet_encodingB\020\n\016_pa"
  "cket_lengthB\017\n\r_fec_encodingB\033\n\031_fec_blo"
  "ck_source_packetsB\033\n\031_fec_block_repair_p"
  "ackets\"\201\002\n\020PrReceiverConfig\0226\n\016target_la"
  "tency\030\001 \001(\0132\031.google.protobuf.DurationH\000"
  "\210\001\001\022:\n\021resampler_backend\030\002 \001(\0162\032.rocvad."
  "PrResamplerBackendH\001\210\001\001\022:\n\021resampler_pro"
  "file\030\003 \001(\0162\032.rocvad.PrResamplerProfileH\002"
  "\210\001\001B\021\n\017_target_latencyB\024\n\022_resampler_bac"
  "kendB\024\n\022_resampler_profile*F\n\014PrDeviceTy"
  "pe\022\031\n\025PR_DEVICE_TYPE_SENDER\020\000\022\033\n\027PR_DEVI"
  "CE_TYPE_RECEIVER\020\001*\212\001\n\013PrInterface\022\035\n\031PR"
  "_INTERFACE_CONSOLIDATED\020\000\022\035\n\031PR_INTERFAC"
  "E_AUDIO_SOURCE\020\001\022\035\n\031PR_INTERFACE_AUDIO_R"
  "EPAIR\020\002\022\036\n\032PR_INTERFACE_AUDIO_CONTROL\020\003*"
  "K\n\017PrChannelLayout\022\032\n\026PR_CHANNEL_LAYOUT_"
  "MONO\020\000\022\034\n\030PR_CHANNEL_LAYOUT_STEREO\020\001*^\n\020"
  "PrPacketEncoding\022#\n\037PR_PACKET_ENCODING_A"
  "VP_L16_MONO\020\000\022%\n!PR_PACKET_ENCODING_AVP_"
  "L16_STEREO\020\001*j\n\rPrFecEncoding\022\033\n\027PR_FEC_"
  "ENCODING_DISABLE\020\000\022\030\n\024PR_FEC_ENCODING_RS"
  "8M\020\001\022\"\n\036PR_FEC_ENCODING_LDPC_STAIRCASE\020\002"
  "*\233\001\n\022PrResamplerBackend\022 \n\034PR_RESAMPLER_"
  "BACKEND_DEFAULT\020\000\022 \n\034PR_RESAMPLER_BACKEN"
  "D_BUILTIN\020\001\022\036\n\032PR_RESAMPLER_BACKEND_SPEE"
  "X\020\002\022!\n\035PR_RESAMPLER_BACKEND_SPEEXDEC\020\003*\224"
  "\001\n\022PrResamplerProfile\022 \n\034PR_RESAMPLER_PR"
  "OFILE_DEFAULT\020\000\022\035\n\031PR_RESAMPLER_PROFILE_"
  "HIGH\020\001\022\037\n\033PR_RESAMPLER_PROFILE_MEDIUM\020\002\022"
  "\034\n\030PR_RESAMPLER_PROFILE_LOW\020\0032\231\004\n\016Driver"
  "Protocol\022(\n\004ping\022\016.rocvad.PrNone\032\016.rocva"
  "d.PrNone\"\000\0225\n\013driver_info\022\016.rocvad.PrNon"
  "e\032\024.rocvad.PrDriverInfo\"\000\0225\n\013stream_logs"
  "\022\016.rocvad.PrNone\032\022.rocvad.PrLogEntry\"\0000\001"
  "\0229\n\017get_all_devices\022\016.rocvad.PrNone\032\024.ro"
  "cvad.PrDeviceList\"\000\022>\n\nget_device\022\030.rocv"
  "ad.PrDeviceSelector\032\024.rocvad.PrDeviceInf"
  "o\"\000\022:\n\nadd_device\022\024.rocvad.PrDeviceInfo\032"
  "\024.rocvad.PrDeviceInfo\"\000\022;\n\rdelete_device"
  "\022\030.rocvad.PrDeviceSelector\032\016.rocvad.PrNo"
  "ne\"\000\022;\n\004bind\022\031.rocvad.PrEndpointRequest\032"
  "\026.rocvad.PrEndpointInfo\"\000\022>\n\007connect\022\031.r"
  "ocvad.PrEndpointRequest\032\026.rocvad.PrEndpo"
  "intInfo\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_driver_5fprotocol_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_driver_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_driver_5fprotocol_2eproto = {
    false, false, 3177, descriptor_table_protodef_driver_5fprotocol_2eproto,
    "driver_protocol.proto",
    &descriptor_table_driver_5fprotocol_2eproto_once, descriptor_table_driver_5fprotocol_2eproto_deps, 2, 11,
    schemas, file_default_instances, TableStruct_driver_5fprotocol_2eproto::offsets,
    file_level_metadata_driver_5fprotocol_2eproto, file_level_enum_descriptors_driver_5fprotocol_2eproto,
    file_level_service_descriptors_driver_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_driver_5fprotocol_2eproto_getter() {
  return &descriptor_table_driver_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_driver_5fprotocol_2eproto(&descriptor_table_driver_5fprotocol_2eproto);
namespace rocvad {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrLogEntry_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[0];
}
bool PrLogEntry_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrLogEntry_Level PrLogEntry::CRIT;
constexpr PrLogEntry_Level PrLogEntry::ERROR;
constexpr PrLogEntry_Level PrLogEntry::WARN;
constexpr PrLogEntry_Level PrLogEntry::INFO;
constexpr PrLogEntry_Level PrLogEntry::DEBUG;
constexpr PrLogEntry_Level PrLogEntry::TRACE;
constexpr PrLogEntry_Level PrLogEntry::Level_MIN;
constexpr PrLogEntry_Level PrLogEntry::Level_MAX;
constexpr int PrLogEntry::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[1];
}
bool PrDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrInterface_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[2];
}
bool PrInterface_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrChannelLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[3];
}
bool PrChannelLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrPacketEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[4];
}
bool PrPacketEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrFecEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[5];
}
bool PrFecEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrResamplerBackend_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[6];
}
bool PrResamplerBackend_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrResamplerProfile_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[7];
}
bool PrResamplerProfile_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PrNone::_Internal {
 public:
};

PrNone::PrNone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:rocvad.PrNone)
}
PrNone::PrNone(const PrNone& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PrNone* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocvad.PrNone)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrNone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrNone::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PrNone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[0]);
}

// ===================================================================

class PrDriverInfo::_Internal {
 public:
};

PrDriverInfo::PrDriverInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDriverInfo)
}
PrDriverInfo::PrDriverInfo(const PrDriverInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrDriverInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.commit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.commit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commit().empty()) {
    _this->_impl_.commit_.Set(from._internal_commit(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rocvad.PrDriverInfo)
}

inline void PrDriverInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.commit_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrDriverInfo::~PrDriverInfo() {
  // @@protoc_insertion_point(destructor:rocvad.PrDriverInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrDriverInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.commit_.Destroy();
}

void PrDriverInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrDriverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDriverInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.commit_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrDriverInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rocvad.PrDriverInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // string commit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_commit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rocvad.PrDriverInfo.commit"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrDriverInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDriverInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocvad.PrDriverInfo.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string commit = 2;
  if (!this->_internal_commit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commit().data(), static_cast<int>(this->_internal_commit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocvad.PrDriverInfo.commit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDriverInfo)
  return target;
}

size_t PrDriverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDriverInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string commit = 2;
  if (!this->_internal_commit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrDriverInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrDriverInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrDriverInfo::GetClassData() const { return &_class_data_; }


void PrDriverInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrDriverInfo*>(&to_msg);
  auto& from = static_cast<const PrDriverInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDriverInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_commit().empty()) {
    _this->_internal_set_commit(from._internal_commit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrDriverInfo::CopyFrom(const PrDriverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDriverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrDriverInfo::IsInitialized() const {
  return true;
}

void PrDriverInfo::InternalSwap(PrDriverInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.commit_, lhs_arena,
      &other->_impl_.commit_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PrDriverInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[1]);
}

// ===================================================================

class PrLogEntry::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const PrLogEntry* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PrLogEntry::_Internal::time(const PrLogEntry* msg) {
  return *msg->_impl_.time_;
}
void PrLogEntry::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
PrLogEntry::PrLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrLogEntry)
}
PrLogEntry::PrLogEntry(const PrLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrLogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:rocvad.PrLogEntry)
}

inline void PrLogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrLogEntry::~PrLogEntry() {
  // @@protoc_insertion_point(destructor:rocvad.PrLogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrLogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void PrLogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrLogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrLogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rocvad.PrLogEntry.Level level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::rocvad::PrLogEntry_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rocvad.PrLogEntry.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrLogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrLogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .rocvad.PrLogEntry.Level level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocvad.PrLogEntry.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrLogEntry)
  return target;
}

size_t PrLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrLogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .rocvad.PrLogEntry.Level level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrLogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrLogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrLogEntry::GetClassData() const { return &_class_data_; }


void PrLogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrLogEntry*>(&to_msg);
  auto& from = static_cast<const PrLogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrLogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrLogEntry::CopyFrom(const PrLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrLogEntry::IsInitialized() const {
  return true;
}

void PrLogEntry::InternalSwap(PrLogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.level_)
      + sizeof(PrLogEntry::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(PrLogEntry, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrLogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[2]);
}

// ===================================================================

class PrDeviceSelector::_Internal {
 public:
};

PrDeviceSelector::PrDeviceSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDeviceSelector)
}
PrDeviceSelector::PrDeviceSelector(const PrDeviceSelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrDeviceSelector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.Selector_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Selector();
  switch (from.Selector_case()) {
    case kIndex: {
      _this->_internal_set_index(from._internal_index());
      break;
    }
    case kUid: {
      _this->_internal_set_uid(from._internal_uid());
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocvad.PrDeviceSelector)
}

inline void PrDeviceSelector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.Selector_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Selector();
}

PrDeviceSelector::~PrDeviceSelector() {
  // @@protoc_insertion_point(destructor:rocvad.PrDeviceSelector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrDeviceSelector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Selector()) {
    clear_Selector();
  }
}

void PrDeviceSelector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrDeviceSelector::clear_Selector() {
// @@protoc_insertion_point(one_of_clear_start:rocvad.PrDeviceSelector)
  switch (Selector_case()) {
    case kIndex: {
      // No need to clear
      break;
    }
    case kUid: {
      _impl_.Selector_.uid_.Destroy();
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SELECTOR_NOT_SET;
}


void PrDeviceSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDeviceSelector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Selector();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrDeviceSelector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rocvad.PrDeviceSelector.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrDeviceSelector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDeviceSelector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // string uid = 2;
  if (_internal_has_uid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocvad.PrDeviceSelector.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDeviceSelector)
  return target;
}

size_t PrDeviceSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDeviceSelector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Selector_case()) {
    // uint32 index = 1;
    case kIndex: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
      break;
    }
    // string uid = 2;
    case kUid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uid());
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrDeviceSelector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrDeviceSelector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrDeviceSelector::GetClassData() const { return &_class_data_; }


void PrDeviceSelector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrDeviceSelector*>(&to_msg);
  auto& from = static_cast<const PrDeviceSelector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDeviceSelector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Selector_case()) {
    case kIndex: {
      _this->_internal_set_index(from._internal_index());
      break;
    }
    case kUid: {
      _this->_internal_set_uid(from._internal_uid());
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrDeviceSelector::CopyFrom(const PrDeviceSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDeviceSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrDeviceSelector::IsInitialized() const {
  return true;
}

void PrDeviceSelector::InternalSwap(PrDeviceSelector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Selector_, other->_impl_.Selector_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrDeviceSelector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[3]);
}

// ===================================================================

class PrDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PrDeviceInfo>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rocvad::PrLocalConfig& local_config(const PrDeviceInfo* msg);
  static const ::rocvad::PrSenderConfig& sender_config(const PrDeviceInfo* msg);
  static const ::rocvad::PrReceiverConfig& receiver_config(const PrDeviceInfo* msg);
};

const ::rocvad::PrLocalConfig&
PrDeviceInfo::_Internal::local_config(const PrDeviceInfo* msg) {
  return *msg->_impl_.local_config_;
}
const ::rocvad::PrSenderConfig&
PrDeviceInfo::_Internal::sender_config(const PrDeviceInfo* msg) {
  return *msg->_impl_.NetworkConfig_.sender_config_;
}
const ::rocvad::PrReceiverConfig&
PrDeviceInfo::_Internal::receiver_config(const PrDeviceInfo* msg) {
  return *msg->_impl_.NetworkConfig_.receiver_config_;
}
void PrDeviceInfo::set_allocated_sender_config(::rocvad::PrSenderConfig* sender_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NetworkConfig();
  if (sender_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender_config);
    if (message_arena != submessage_arena) {
      sender_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_config, submessage_arena);
    }
    set_has_sender_config();
    _impl_.NetworkConfig_.sender_config_ = sender_config;
  }
  // @@protoc_insertion_point(field_set_allocated:rocvad.PrDeviceInfo.sender_config)
}
void PrDeviceInfo::set_allocated_receiver_config(::rocvad::PrReceiverConfig* receiver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NetworkConfig();
  if (receiver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(receiver_config);
    if (message_arena != submessage_arena) {
      receiver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_config, submessage_arena);
    }
    set_has_receiver_config();
    _impl_.NetworkConfig_.receiver_config_ = receiver_config;
  }
  // @@protoc_insertion_point(field_set_allocated:rocvad.PrDeviceInfo.receiver_config)
}
PrDeviceInfo::PrDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDeviceInfo)
}
PrDeviceInfo::PrDeviceInfo(const PrDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrDeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_endpoints_){from._impl_.local_endpoints_}
    , decltype(_impl_.remote_endpoints_){from._impl_.remote_endpoints_}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.local_config_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.NetworkConfig_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_local_config()) {
    _this->_impl_.local_config_ = new ::rocvad::PrLocalConfig(*from._impl_.local_config_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_));
  clear_has_NetworkConfig();
  switch (from.NetworkConfig_case()) {
    case kSenderConfig: {
      _this->_internal_mutable_sender_config()->::rocvad::PrSenderConfig::MergeFrom(
          from._internal_sender_config());
      break;
    }
    case kReceiverConfig: {
      _this->_internal_mutable_receiver_config()->::rocvad::PrReceiverConfig::MergeFrom(
          from._internal_receiver_config());
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocvad.PrDeviceInfo)
}

inline void PrDeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_endpoints_){arena}
    , decltype(_impl_.remote_endpoints_){arena}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.local_config_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.NetworkConfig_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_NetworkConfig();
}

PrDeviceInfo::~PrDeviceInfo() {
  // @@protoc_insertion_point(destructor:rocvad.PrDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_endpoints_.~RepeatedPtrField();
  _impl_.remote_endpoints_.~RepeatedPtrField();
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.local_config_;
  if (has_NetworkConfig()) {
    clear_NetworkConfig();
  }
}

void PrDeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrDeviceInfo::clear_NetworkConfig() {
// @@protoc_insertion_point(one_of_clear_start:rocvad.PrDeviceInfo)
  switch (NetworkConfig_case()) {
    case kSenderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.NetworkConfig_.sender_config_;
      }
      break;
    }
    case kReceiverConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.NetworkConfig_.receiver_config_;
      }
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NETWORKCONFIG_NOT_SET;
}


void PrDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_endpoints_.Clear();
  _impl_.remote_endpoints_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.local_config_ != nullptr) {
    delete _impl_.local_config_;
  }
  _impl_.local_config_ = nullptr;
  _impl_.type_ = 0;
  _impl_.index_ = 0u;
  clear_NetworkConfig();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocvad.PrDeviceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rocvad::PrDeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rocvad.PrDeviceInfo.uid"));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rocvad.PrDeviceInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // .rocvad.PrLocalConfig local_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rocvad.PrSenderConfig sender_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rocvad.PrReceiverConfig receiver_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rocvad.PrEndpointInfo local_endpoints = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local_endpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rocvad.PrEndpointInfo remote_endpoints = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_endpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocvad.PrDeviceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 index = 2;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional string uid = 3;
  if (_internal_has_uid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocvad.PrDeviceInfo.uid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uid(), target);
  }

  // optional string name = 4;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocvad.PrDeviceInfo.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .rocvad.PrLocalConfig local_config = 5;
  if (this->_internal_has_local_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::local_config(this),
        _Internal::local_config(this).GetCachedSize(), target, stream);
  }

  // .rocvad.PrSenderConfig sender_config = 6;
  if (_internal_has_sender_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sender_config(this),
        _Internal::sender_config(this).GetCachedSize(), target, stream);
  }

  // .rocvad.PrReceiverConfig receiver_config = 7;
  if (_internal_has_receiver_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::receiver_config(this),
        _Internal::receiver_config(this).GetCachedSize(), target, stream);
  }

  // repeated .rocvad.PrEndpointInfo local_endpoints = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_endpoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_local_endpoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rocvad.PrEndpointInfo remote_endpoints = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_endpoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_endpoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDeviceInfo)
  return target;
}

size_t PrDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocvad.PrEndpointInfo local_endpoints = 8;
  total_size += 1UL * this->_internal_local_endpoints_size();
  for (const auto& msg : this->_impl_.local_endpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rocvad.PrEndpointInfo remote_endpoints = 9;
  total_size += 1UL * this->_internal_remote_endpoints_size();
  for (const auto& msg : this->_impl_.remote_endpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uid());
    }

    // optional string name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  // .rocvad.PrLocalConfig local_config = 5;
  if (this->_internal_has_local_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_config_);
  }

  // .rocvad.PrDeviceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  switch (NetworkConfig_case()) {
    // .rocvad.PrSenderConfig sender_config = 6;
    case kSenderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.NetworkConfig_.sender_config_);
      break;
    }
    // .rocvad.PrReceiverConfig receiver_config = 7;
    case kReceiverConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.NetworkConfig_.receiver_config_);
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrDeviceInfo::GetClassData() const { return &_class_data_; }


void PrDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrDeviceInfo*>(&to_msg);
  auto& from = static_cast<const PrDeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_endpoints_.MergeFrom(from._impl_.local_endpoints_);
  _this->_impl_.remote_endpoints_.MergeFrom(from._impl_.remote_endpoints_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
  }
  if (from._internal_has_local_config()) {
    _this->_internal_mutable_local_config()->::rocvad::PrLocalConfig::MergeFrom(
        from._internal_local_config());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_index(from._internal_index());
  }
  switch (from.NetworkConfig_case()) {
    case kSenderConfig: {
      _this->_internal_mutable_sender_config()->::rocvad::PrSenderConfig::MergeFrom(
          from._internal_sender_config());
      break;
    }
    case kReceiverConfig: {
      _this->_internal_mutable_receiver_config()->::rocvad::PrReceiverConfig::MergeFrom(
          from._internal_receiver_config());
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrDeviceInfo::CopyFrom(const PrDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrDeviceInfo::IsInitialized() const {
  return true;
}

void PrDeviceInfo::InternalSwap(PrDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.local_endpoints_.InternalSwap(&other->_impl_.local_endpoints_);
  _impl_.remote_endpoints_.InternalSwap(&other->_impl_.remote_endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.index_)
      + sizeof(PrDeviceInfo::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(PrDeviceInfo, _impl_.local_config_)>(
          reinterpret_cast<char*>(&_impl_.local_config_),
          reinterpret_cast<char*>(&other->_impl_.local_config_));
  swap(_impl_.NetworkConfig_, other->_impl_.NetworkConfig_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[4]);
}

// ===================================================================

class PrDeviceList::_Internal {
 public:
};

PrDeviceList::PrDeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrDeviceList)
}
PrDeviceList::PrDeviceList(const PrDeviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrDeviceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocvad.PrDeviceList)
}

inline void PrDeviceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrDeviceList::~PrDeviceList() {
  // @@protoc_insertion_point(destructor:rocvad.PrDeviceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrDeviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devices_.~RepeatedPtrField();
}

void PrDeviceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrDeviceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrDeviceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rocvad.PrDeviceInfo devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrDeviceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrDeviceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rocvad.PrDeviceInfo devices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrDeviceList)
  return target;
}

size_t PrDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrDeviceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocvad.PrDeviceInfo devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_impl_.devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrDeviceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrDeviceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrDeviceList::GetClassData() const { return &_class_data_; }


void PrDeviceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrDeviceList*>(&to_msg);
  auto& from = static_cast<const PrDeviceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrDeviceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrDeviceList::CopyFrom(const PrDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrDeviceList::IsInitialized() const {
  return true;
}

void PrDeviceList::InternalSwap(PrDeviceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrDeviceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[5]);
}

// ===================================================================

class PrEndpointRequest::_Internal {
 public:
  static const ::rocvad::PrDeviceSelector& device(const PrEndpointRequest* msg);
  static const ::rocvad::PrEndpointInfo& endpoint(const PrEndpointRequest* msg);
};

const ::rocvad::PrDeviceSelector&
PrEndpointRequest::_Internal::device(const PrEndpointRequest* msg) {
  return *msg->_impl_.device_;
}
const ::rocvad::PrEndpointInfo&
PrEndpointRequest::_Internal::endpoint(const PrEndpointRequest* msg) {
  return *msg->_impl_.endpoint_;
}
PrEndpointRequest::PrEndpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrEndpointRequest)
}
PrEndpointRequest::PrEndpointRequest(const PrEndpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrEndpointRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::rocvad::PrDeviceSelector(*from._impl_.device_);
  }
  if (from._internal_has_endpoint()) {
    _this->_impl_.endpoint_ = new ::rocvad::PrEndpointInfo(*from._impl_.endpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:rocvad.PrEndpointRequest)
}

inline void PrEndpointRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrEndpointRequest::~PrEndpointRequest() {
  // @@protoc_insertion_point(destructor:rocvad.PrEndpointRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrEndpointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
  if (this != internal_default_instance()) delete _impl_.endpoint_;
}

void PrEndpointRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrEndpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrEndpointRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrEndpointRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocvad.PrDeviceSelector device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rocvad.PrEndpointInfo endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrEndpointRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrEndpointRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocvad.PrDeviceSelector device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  // .rocvad.PrEndpointInfo endpoint = 2;
  if (this->_internal_has_endpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrEndpointRequest)
  return target;
}

size_t PrEndpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrEndpointRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocvad.PrDeviceSelector device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  // .rocvad.PrEndpointInfo endpoint = 2;
  if (this->_internal_has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.endpoint_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrEndpointRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrEndpointRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrEndpointRequest::GetClassData() const { return &_class_data_; }


void PrEndpointRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrEndpointRequest*>(&to_msg);
  auto& from = static_cast<const PrEndpointRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrEndpointRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::rocvad::PrDeviceSelector::MergeFrom(
        from._internal_device());
  }
  if (from._internal_has_endpoint()) {
    _this->_internal_mutable_endpoint()->::rocvad::PrEndpointInfo::MergeFrom(
        from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrEndpointRequest::CopyFrom(const PrEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrEndpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrEndpointRequest::IsInitialized() const {
  return true;
}

void PrEndpointRequest::InternalSwap(PrEndpointRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.endpoint_)
      + sizeof(PrEndpointRequest::_impl_.endpoint_)
      - PROTOBUF_FIELD_OFFSET(PrEndpointRequest, _impl_.device_)>(
          reinterpret_cast<char*>(&_impl_.device_),
          reinterpret_cast<char*>(&other->_impl_.device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrEndpointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[6]);
}

// ===================================================================

class PrEndpointInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PrEndpointInfo>()._impl_._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PrEndpointInfo::PrEndpointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrEndpointInfo)
}
PrEndpointInfo::PrEndpointInfo(const PrEndpointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrEndpointInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.interface_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.slot_, &from._impl_.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interface_) -
    reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.interface_));
  // @@protoc_insertion_point(copy_constructor:rocvad.PrEndpointInfo)
}

inline void PrEndpointInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.interface_){0}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrEndpointInfo::~PrEndpointInfo() {
  // @@protoc_insertion_point(destructor:rocvad.PrEndpointInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrEndpointInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void PrEndpointInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrEndpointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrEndpointInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.slot_ = 0u;
  _impl_.interface_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrEndpointInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rocvad.PrInterface interface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::rocvad::PrInterface>(val));
        } else
          goto handle_unusual;
        continue;
      // string uri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rocvad.PrEndpointInfo.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrEndpointInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrEndpointInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 slot = 1;
  if (_internal_has_slot()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  // .rocvad.PrInterface interface = 2;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_interface(), target);
  }

  // string uri = 3;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocvad.PrEndpointInfo.uri");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrEndpointInfo)
  return target;
}

size_t PrEndpointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrEndpointInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 3;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // optional uint32 slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
  }

  // .rocvad.PrInterface interface = 2;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interface());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrEndpointInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrEndpointInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrEndpointInfo::GetClassData() const { return &_class_data_; }


void PrEndpointInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrEndpointInfo*>(&to_msg);
  auto& from = static_cast<const PrEndpointInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrEndpointInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_has_slot()) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_interface() != 0) {
    _this->_internal_set_interface(from._internal_interface());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrEndpointInfo::CopyFrom(const PrEndpointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrEndpointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrEndpointInfo::IsInitialized() const {
  return true;
}

void PrEndpointInfo::InternalSwap(PrEndpointInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.interface_)
      + sizeof(PrEndpointInfo::_impl_.interface_)
      - PROTOBUF_FIELD_OFFSET(PrEndpointInfo, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrEndpointInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[7]);
}

// ===================================================================

class PrLocalConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PrLocalConfig>()._impl_._has_bits_);
  static void set_has_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PrLocalConfig::PrLocalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrLocalConfig)
}
PrLocalConfig::PrLocalConfig(const PrLocalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrLocalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sample_rate_){}
    , decltype(_impl_.channel_layout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sample_rate_, &from._impl_.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_layout_) -
    reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.channel_layout_));
  // @@protoc_insertion_point(copy_constructor:rocvad.PrLocalConfig)
}

inline void PrLocalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sample_rate_){0u}
    , decltype(_impl_.channel_layout_){0}
  };
}

PrLocalConfig::~PrLocalConfig() {
  // @@protoc_insertion_point(destructor:rocvad.PrLocalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrLocalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrLocalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrLocalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrLocalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.sample_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_layout_) -
        reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.channel_layout_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrLocalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sample_rate(&has_bits);
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rocvad.PrChannelLayout channel_layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channel_layout(static_cast<::rocvad::PrChannelLayout>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrLocalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrLocalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 sample_rate = 1;
  if (_internal_has_sample_rate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_rate(), target);
  }

  // optional .rocvad.PrChannelLayout channel_layout = 2;
  if (_internal_has_channel_layout()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channel_layout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrLocalConfig)
  return target;
}

size_t PrLocalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrLocalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 sample_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_rate());
    }

    // optional .rocvad.PrChannelLayout channel_layout = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_layout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrLocalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrLocalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrLocalConfig::GetClassData() const { return &_class_data_; }


void PrLocalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrLocalConfig*>(&to_msg);
  auto& from = static_cast<const PrLocalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrLocalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_layout_ = from._impl_.channel_layout_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrLocalConfig::CopyFrom(const PrLocalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrLocalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrLocalConfig::IsInitialized() const {
  return true;
}

void PrLocalConfig::InternalSwap(PrLocalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.channel_layout_)
      + sizeof(PrLocalConfig::_impl_.channel_layout_)
      - PROTOBUF_FIELD_OFFSET(PrLocalConfig, _impl_.sample_rate_)>(
          reinterpret_cast<char*>(&_impl_.sample_rate_),
          reinterpret_cast<char*>(&other->_impl_.sample_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrLocalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[8]);
}

// ===================================================================

class PrSenderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PrSenderConfig>()._impl_._has_bits_);
  static void set_has_packet_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& packet_length(const PrSenderConfig* msg);
  static void set_has_packet_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fec_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fec_block_source_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fec_block_repair_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
PrSenderConfig::_Internal::packet_length(const PrSenderConfig* msg) {
  return *msg->_impl_.packet_length_;
}
void PrSenderConfig::clear_packet_length() {
  if (_impl_.packet_length_ != nullptr) _impl_.packet_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PrSenderConfig::PrSenderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrSenderConfig)
}
PrSenderConfig::PrSenderConfig(const PrSenderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrSenderConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_length_){nullptr}
    , decltype(_impl_.packet_encoding_){}
    , decltype(_impl_.fec_encoding_){}
    , decltype(_impl_.fec_block_source_packets_){}
    , decltype(_impl_.fec_block_repair_packets_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packet_length()) {
    _this->_impl_.packet_length_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.packet_length_);
  }
  ::memcpy(&_impl_.packet_encoding_, &from._impl_.packet_encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fec_block_repair_packets_) -
    reinterpret_cast<char*>(&_impl_.packet_encoding_)) + sizeof(_impl_.fec_block_repair_packets_));
  // @@protoc_insertion_point(copy_constructor:rocvad.PrSenderConfig)
}

inline void PrSenderConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_length_){nullptr}
    , decltype(_impl_.packet_encoding_){0}
    , decltype(_impl_.fec_encoding_){0}
    , decltype(_impl_.fec_block_source_packets_){0u}
    , decltype(_impl_.fec_block_repair_packets_){0u}
  };
}

PrSenderConfig::~PrSenderConfig() {
  // @@protoc_insertion_point(destructor:rocvad.PrSenderConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrSenderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_length_;
}

void PrSenderConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrSenderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrSenderConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.packet_length_ != nullptr);
    _impl_.packet_length_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.packet_encoding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fec_block_repair_packets_) -
        reinterpret_cast<char*>(&_impl_.packet_encoding_)) + sizeof(_impl_.fec_block_repair_packets_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrSenderConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rocvad.PrPacketEncoding packet_encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_packet_encoding(static_cast<::rocvad::PrPacketEncoding>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration packet_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_length(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rocvad.PrFecEncoding fec_encoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fec_encoding(static_cast<::rocvad::PrFecEncoding>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fec_block_source_packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_fec_block_source_packets(&has_bits);
          _impl_.fec_block_source_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fec_block_repair_packets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fec_block_repair_packets(&has_bits);
          _impl_.fec_block_repair_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrSenderConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrSenderConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .rocvad.PrPacketEncoding packet_encoding = 1;
  if (_internal_has_packet_encoding()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packet_encoding(), target);
  }

  // optional .google.protobuf.Duration packet_length = 2;
  if (_internal_has_packet_length()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::packet_length(this),
        _Internal::packet_length(this).GetCachedSize(), target, stream);
  }

  // optional .rocvad.PrFecEncoding fec_encoding = 3;
  if (_internal_has_fec_encoding()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fec_encoding(), target);
  }

  // optional uint32 fec_block_source_packets = 4;
  if (_internal_has_fec_block_source_packets()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fec_block_source_packets(), target);
  }

  // optional uint32 fec_block_repair_packets = 5;
  if (_internal_has_fec_block_repair_packets()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_fec_block_repair_packets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrSenderConfig)
  return target;
}

size_t PrSenderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrSenderConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .google.protobuf.Duration packet_length = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_length_);
    }

    // optional .rocvad.PrPacketEncoding packet_encoding = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_packet_encoding());
    }

    // optional .rocvad.PrFecEncoding fec_encoding = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fec_encoding());
    }

    // optional uint32 fec_block_source_packets = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fec_block_source_packets());
    }

    // optional uint32 fec_block_repair_packets = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fec_block_repair_packets());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrSenderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrSenderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrSenderConfig::GetClassData() const { return &_class_data_; }


void PrSenderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrSenderConfig*>(&to_msg);
  auto& from = static_cast<const PrSenderConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrSenderConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_packet_length()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_packet_length());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.packet_encoding_ = from._impl_.packet_encoding_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fec_encoding_ = from._impl_.fec_encoding_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fec_block_source_packets_ = from._impl_.fec_block_source_packets_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fec_block_repair_packets_ = from._impl_.fec_block_repair_packets_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrSenderConfig::CopyFrom(const PrSenderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrSenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrSenderConfig::IsInitialized() const {
  return true;
}

void PrSenderConfig::InternalSwap(PrSenderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.fec_block_repair_packets_)
      + sizeof(PrSenderConfig::_impl_.fec_block_repair_packets_)
      - PROTOBUF_FIELD_OFFSET(PrSenderConfig, _impl_.packet_length_)>(
          reinterpret_cast<char*>(&_impl_.packet_length_),
          reinterpret_cast<char*>(&other->_impl_.packet_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrSenderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[9]);
}

// ===================================================================

class PrReceiverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PrReceiverConfig>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& target_latency(const PrReceiverConfig* msg);
  static void set_has_target_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resampler_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resampler_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
PrReceiverConfig::_Internal::target_latency(const PrReceiverConfig* msg) {
  return *msg->_impl_.target_latency_;
}
void PrReceiverConfig::clear_target_latency() {
  if (_impl_.target_latency_ != nullptr) _impl_.target_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PrReceiverConfig::PrReceiverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rocvad.PrReceiverConfig)
}
PrReceiverConfig::PrReceiverConfig(const PrReceiverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrReceiverConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_latency_){nullptr}
    , decltype(_impl_.resampler_backend_){}
    , decltype(_impl_.resampler_profile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_latency()) {
    _this->_impl_.target_latency_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.target_latency_);
  }
  ::memcpy(&_impl_.resampler_backend_, &from._impl_.resampler_backend_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resampler_profile_) -
    reinterpret_cast<char*>(&_impl_.resampler_backend_)) + sizeof(_impl_.resampler_profile_));
  // @@protoc_insertion_point(copy_constructor:rocvad.PrReceiverConfig)
}

inline void PrReceiverConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_latency_){nullptr}
    , decltype(_impl_.resampler_backend_){0}
    , decltype(_impl_.resampler_profile_){0}
  };
}

PrReceiverConfig::~PrReceiverConfig() {
  // @@protoc_insertion_point(destructor:rocvad.PrReceiverConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrReceiverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_latency_;
}

void PrReceiverConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrReceiverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rocvad.PrReceiverConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.target_latency_ != nullptr);
    _impl_.target_latency_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.resampler_backend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resampler_profile_) -
        reinterpret_cast<char*>(&_impl_.resampler_backend_)) + sizeof(_impl_.resampler_profile_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrReceiverConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .google.protobuf.Duration target_latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_latency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rocvad.PrResamplerBackend resampler_backend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resampler_backend(static_cast<::rocvad::PrResamplerBackend>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .rocvad.PrResamplerProfile resampler_profile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resampler_profile(static_cast<::rocvad::PrResamplerProfile>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrReceiverConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocvad.PrReceiverConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .google.protobuf.Duration target_latency = 1;
  if (_internal_has_target_latency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target_latency(this),
        _Internal::target_latency(this).GetCachedSize(), target, stream);
  }

  // optional .rocvad.PrResamplerBackend resampler_backend = 2;
  if (_internal_has_resampler_backend()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resampler_backend(), target);
  }

  // optional .rocvad.PrResamplerProfile resampler_profile = 3;
  if (_internal_has_resampler_profile()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resampler_profile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocvad.PrReceiverConfig)
  return target;
}

size_t PrReceiverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocvad.PrReceiverConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Duration target_latency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_latency_);
    }

    // optional .rocvad.PrResamplerBackend resampler_backend = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_backend());
    }

    // optional .rocvad.PrResamplerProfile resampler_profile = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_profile());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrReceiverConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrReceiverConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrReceiverConfig::GetClassData() const { return &_class_data_; }


void PrReceiverConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrReceiverConfig*>(&to_msg);
  auto& from = static_cast<const PrReceiverConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocvad.PrReceiverConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target_latency()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_target_latency());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.resampler_backend_ = from._impl_.resampler_backend_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.resampler_profile_ = from._impl_.resampler_profile_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrReceiverConfig::CopyFrom(const PrReceiverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocvad.PrReceiverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrReceiverConfig::IsInitialized() const {
  return true;
}

void PrReceiverConfig::InternalSwap(PrReceiverConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.resampler_profile_)
      + sizeof(PrReceiverConfig::_impl_.resampler_profile_)
      - PROTOBUF_FIELD_OFFSET(PrReceiverConfig, _impl_.target_latency_)>(
          reinterpret_cast<char*>(&_impl_.target_latency_),
          reinterpret_cast<char*>(&other->_impl_.target_latency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrReceiverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_driver_5fprotocol_2eproto_getter, &descriptor_table_driver_5fprotocol_2eproto_once,
      file_level_metadata_driver_5fprotocol_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rocvad
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rocvad::PrNone*
Arena::CreateMaybeMessage< ::rocvad::PrNone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrNone >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrDriverInfo*
Arena::CreateMaybeMessage< ::rocvad::PrDriverInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrDriverInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrLogEntry*
Arena::CreateMaybeMessage< ::rocvad::PrLogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrDeviceSelector*
Arena::CreateMaybeMessage< ::rocvad::PrDeviceSelector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrDeviceSelector >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrDeviceInfo*
Arena::CreateMaybeMessage< ::rocvad::PrDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrDeviceList*
Arena::CreateMaybeMessage< ::rocvad::PrDeviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrDeviceList >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrEndpointRequest*
Arena::CreateMaybeMessage< ::rocvad::PrEndpointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrEndpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrEndpointInfo*
Arena::CreateMaybeMessage< ::rocvad::PrEndpointInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrEndpointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrLocalConfig*
Arena::CreateMaybeMessage< ::rocvad::PrLocalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrLocalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrSenderConfig*
Arena::CreateMaybeMessage< ::rocvad::PrSenderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrSenderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::rocvad::PrReceiverConfig*
Arena::CreateMaybeMessage< ::rocvad::PrReceiverConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocvad::PrReceiverConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
